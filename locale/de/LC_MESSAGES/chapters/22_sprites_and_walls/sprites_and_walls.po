# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-02 14:54-0600\n"
"PO-Revision-Date: 2019-07-15 08:55+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:4
msgid "Sprites and Walls"
msgstr "Sprites und Wände"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:7
msgid "Setup"
msgstr "Konfiguration"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:9
msgid ""
"Many games with sprites often have \"walls\" that the character can't "
"move through. There are rather straight-forward to create."
msgstr ""
"Viele Spiele mit Sprites haben oft \"Wände\", durch die sich die "
"Spielfigur nicht bewegen kann. Sie lassen sich eher unkompliziert "
"erstellen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:12
msgid ""
"To begin with, let's get a couple images. Our character, and a box that "
"will act as a blocking wall. Both images are from `kenney.nl`_."
msgstr ""
"Lass uns zunächst mit ein paar Bildern anfangen. Unsere Spielfigur und "
"eine Kiste, die als Sperrmauer fungiert. Beide Bilder stammen von "
"`kenney.nl`_."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:20
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\images/character.png"
msgstr ".. image:: chapters/22_sprites_and_walls/images/character.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:20
msgid "images/character.png"
msgstr "images/character.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:25
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\images/boxCrate_double.png"
msgstr ".. image:: chapters/22_sprites_and_walls/images/boxCrate_double.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:25
msgid "images/boxCrate_double.png"
msgstr "images/boxCrate_double.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:27
msgid "Start with a default file:"
msgstr "Beginne mit einem Einstiegsprogramm:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:29
msgid "sprite_move_walls.py start"
msgstr "sprite_move_walls.py - Anfang"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:29
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprites With "
"Walls Example\")\n"
"\n"
"\n"
"    def setup(self):\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprites With "
"Walls Example\")\n"
"\n"
"\n"
"    def setup(self):\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"\n"
"\n"
"def main():\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:34
msgid ""
"In the ``__init__`` method, let's create some variables to hold our "
"sprites:"
msgstr ""
"Erstellen wir in der ``__init__``-Methode einige Attribute für unsere "
"Sprites:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:36
msgid ""
"# Sprite lists\n"
"self.player_list = None\n"
"self.wall_list = None\n"
"\n"
"# Set up the player\n"
"self.player_sprite = None\n"
"\n"
"# This variable holds our simple \"physics engine\"\n"
"self.physics_engine = None"
msgstr ""
"# Sprite lists\n"
"self.player_list = None\n"
"self.wall_list = None\n"
"\n"
"# Set up the player\n"
"self.player_sprite = None\n"
"\n"
"# This variable holds our simple \"physics engine\"\n"
"self.physics_engine = None"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:48
msgid "In the ``setup`` method, let's create our sprite lists:"
msgstr "In der ``setup`` Methode erstellen wir unsere Sprite-Listen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:50
msgid ""
"# Sprite lists\n"
"self.player_list = arcade.SpriteList()\n"
"self.wall_list = arcade.SpriteList()"
msgstr ""
"# Sprite lists\n"
"self.player_list = arcade.SpriteList()\n"
"self.wall_list = arcade.SpriteList()"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:57
msgid "Then reset the score and create the player:"
msgstr "Setze danach die Punktzahl zurück und erstelle die Spielfigur:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:59
msgid ""
"# Reset the score\n"
"self.score = 0\n"
"\n"
"# Create the player\n"
"self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"self.player_sprite.center_x = 50\n"
"self.player_sprite.center_y = 64\n"
"self.player_list.append(self.player_sprite)"
msgstr ""
"# Reset the score\n"
"self.score = 0\n"
"\n"
"# Create the player\n"
"self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"self.player_sprite.center_x = 50\n"
"self.player_sprite.center_y = 64\n"
"self.player_list.append(self.player_sprite)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:70
msgid "Then go ahead and draw everything in our ``on_draw``:"
msgstr "Dann zeichne alles in unserer Methode ``on_draw``:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:72
msgid ""
"def on_draw(self):\n"
"    arcade.start_render()\n"
"    self.wall_list.draw()\n"
"    self.player_list.draw()"
msgstr ""
"def on_draw(self):\n"
"    arcade.start_render()\n"
"    self.wall_list.draw()\n"
"    self.player_list.draw()"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:79
msgid "Run the program and make sure it works."
msgstr "Führe das Programm aus und stelle sicher, dass es funktioniert."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:82
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\just_player.png"
msgstr ".. image:: chapters/22_sprites_and_walls/just_player.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:86
msgid "Individually Placing Walls"
msgstr "Wände individuell platzieren"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:87
msgid ""
"In our ``setup`` method, we can position individual boxes to be used as "
"\"walls\":"
msgstr ""
"In unserer ``setup`` Methode können wir einzelne Boxen positionieren, die"
" als \"Wände\" verwendet werden:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:89
msgid ""
"# Manually create and position a box at 300, 200\n"
"wall = arcade.Sprite(\"images/boxCrate_double.png\", SPRITE_SCALING_BOX)\n"
"wall.center_x = 300\n"
"wall.center_y = 200\n"
"self.wall_list.append(wall)\n"
"\n"
"# Manually create and position a box at 364, 200\n"
"wall = arcade.Sprite(\"images/boxCrate_double.png\", SPRITE_SCALING_BOX)\n"
"wall.center_x = 364\n"
"wall.center_y = 200\n"
"self.wall_list.append(wall)"
msgstr ""
"# Manually create and position a box at 300, 200\n"
"wall = arcade.Sprite(\"images/boxCrate_double.png\", SPRITE_SCALING_BOX)\n"
"wall.center_x = 300\n"
"wall.center_y = 200\n"
"self.wall_list.append(wall)\n"
"\n"
"# Manually create and position a box at 364, 200\n"
"wall = arcade.Sprite(\"images/boxCrate_double.png\", SPRITE_SCALING_BOX)\n"
"wall.center_x = 364\n"
"wall.center_y = 200\n"
"self.wall_list.append(wall)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:103
msgid "Go ahead and try it out. It should look like:"
msgstr "Probiere es einfach aus. Es sollte so aussehen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:106
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\with_two_boxes.png"
msgstr ".. image:: chapters/22_sprites_and_walls/with_two_boxes.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:107
#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:160
msgid "Full listing below:"
msgstr "Vollständiges Listing unten:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:109
msgid "sprite_move_walls.py Step 2"
msgstr "sprite_move_walls.py - Schritt 2"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:109
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:117
msgid "Placing Walls With A Loop"
msgstr "Wände mit Hilfe einer Schleife platzieren"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:119
msgid ""
"In our ``setup`` method, we can create a row of box sprites using a "
"``for`` loop. In the code below, our y value is always 350, and we change"
" the x value from 173 to 650. We put a box every 64 pixels because each "
"box happens to be 64 pixels wide."
msgstr ""
"In unserer ``setup`` -Methode können wir eine Reihe von Box-Sprites mit "
"einer ``for``-Schleife erstellen. Im folgenden Code ist unser y-Wert "
"immer 350, und wir ändern den x-Wert von 173 in 650. Wir setzen alle 64 "
"Pixel ein Kästchen, da jedes Kästchen 64 Pixel breit ist."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:124
msgid ""
"# Place boxes inside a loop\n"
"for x in range(173, 650, 64):\n"
"    wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"    wall.center_x = x\n"
"    wall.center_y = 350\n"
"    self.wall_list.append(wall)"
msgstr ""
"# Place boxes inside a loop\n"
"for x in range(173, 650, 64):\n"
"    wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"    wall.center_x = x\n"
"    wall.center_y = 350\n"
"    self.wall_list.append(wall)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:135
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\boxes_loop.png"
msgstr ".. image:: chapters/22_sprites_and_walls/boxes_loop.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:139
msgid "Placing Walls With A List"
msgstr "Wände mit einer Liste platzieren"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:141
msgid ""
"You could even create a list of coordinates, and then just loop through "
"that list creating walls:"
msgstr ""
"Man kann sogar eine Liste mit Koordinaten erstellen und diese Liste dann "
"einfach durchlaufen und Wände erstellen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:143
msgid ""
"# --- Place walls with a list\n"
"coordinate_list = [[400, 500],\n"
"                   [470, 500],\n"
"                   [400, 570],\n"
"                   [470, 570]]\n"
"\n"
"# Loop through coordinates\n"
"for coordinate in coordinate_list:\n"
"    wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"    wall.center_x = coordinate[0]\n"
"    wall.center_y = coordinate[1]\n"
"    self.wall_list.append(wall)"
msgstr ""
"# --- Place walls with a list\n"
"coordinate_list = [[400, 500],\n"
"                   [470, 500],\n"
"                   [400, 570],\n"
"                   [470, 570]]\n"
"\n"
"# Loop through coordinates\n"
"for coordinate in coordinate_list:\n"
"    wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"    wall.center_x = coordinate[0]\n"
"    wall.center_y = coordinate[1]\n"
"    self.wall_list.append(wall)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:159
#, fuzzy
msgid ".. image:: chapters\\22_sprites_and_walls\\list.png"
msgstr ".. image:: chapters/22_sprites_and_walls/list.png"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:162
msgid "sprite_move_walls.py Step 3"
msgstr "sprite_move_walls.py - Schritt 3"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:162
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.player_list.draw()\n"
"        self.wall_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.player_list.draw()\n"
"        self.wall_list.draw()\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:169
msgid "Physics Engine"
msgstr "Physik-Engine"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:171
msgid "First, we need to hook the keyboard up to the player:"
msgstr "Zuerst müssen wir die Tastatur mit der Spielfigur verknüpfen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:173
msgid ""
"def on_key_press(self, key, modifiers):\n"
"    \"\"\"Called whenever a key is pressed. \"\"\"\n"
"\n"
"    if key == arcade.key.UP:\n"
"        self.player_sprite.change_y = MOVEMENT_SPEED\n"
"    elif key == arcade.key.DOWN:\n"
"        self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"    elif key == arcade.key.LEFT:\n"
"        self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"    elif key == arcade.key.RIGHT:\n"
"        self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"def on_key_release(self, key, modifiers):\n"
"    \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"    if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"        self.player_sprite.change_y = 0\n"
"    elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"        self.player_sprite.change_x = 0"
msgstr ""
"def on_key_press(self, key, modifiers):\n"
"    \"\"\"Called whenever a key is pressed. \"\"\"\n"
"\n"
"    if key == arcade.key.UP:\n"
"        self.player_sprite.change_y = MOVEMENT_SPEED\n"
"    elif key == arcade.key.DOWN:\n"
"        self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"    elif key == arcade.key.LEFT:\n"
"        self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"    elif key == arcade.key.RIGHT:\n"
"        self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"def on_key_release(self, key, modifiers):\n"
"    \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"    if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"        self.player_sprite.change_y = 0\n"
"    elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"        self.player_sprite.change_x = 0"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:196
msgid "Now, we need to add a way to stop the player from running into walls."
msgstr ""
"Jetzt müssen wir eine Möglichkeit hinzufügen, die Spielfigur daran zu "
"hindern, in die Wände hinein zu rennen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:198
msgid ""
"The Arcade Library has a built in \"physics engine.\" A physics engine "
"handles the interactions between the virtual physical objects in the "
"game. For example, a physics engine might be several balls running into "
"each other, a character sliding down a hill, or a car making a turn on "
"the road."
msgstr ""
"Die Arcade-Bibliothek verfügt über eine integrierte \"Physik-Engine\". "
"Eine Physik-Engine verwaltet die Interaktionen zwischen den virtuellen "
"physischen Objekten im Spiel. Zum Beispiel kann eine Physik-Engine aus "
"mehreren Bällen bestehen, die aufeinander treffen, eine Spielfigur, die "
"einen Hügel hinunterrutscht, oder einem Auto, das auf der Straße eine "
"Kurve fährt."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:203
msgid ""
"Physics engines have made impressive gains on what they can simulate. For"
" our game, we'll just keep things simple and make sure our character "
"can't walk through walls."
msgstr ""
"Physik-Engines haben beeindruckende Fortschritte erzielt, was sie "
"simulieren können. Für unser Spiel werden wir die Dinge einfach halten "
"und sicherstellen, dass unsere Spielfigur nicht durch Wände gehen kann."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:207
msgid "We'll create variable to hold our physics engine in the ``__init__``:"
msgstr ""
"Wir werden ein Attribut für unsere Physik-Engine in ``__init__`` "
"erstellen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:209
msgid ""
"# This variable holds our simple \"physics engine\"\n"
"self.physics_engine = None"
msgstr ""
"# This variable holds our simple \"physics engine\"\n"
"self.physics_engine = None"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:214
msgid ""
"We can create the actual physics engine in our ``setup`` method with the "
"following code:"
msgstr ""
"Wir können die eigentliche Physik-Engine in unserer ``setup``-Methode mit"
" folgendem Code erstellen:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:217
msgid ""
"self.physics_engine = arcade.PhysicsEngineSimple(self.player_sprite, "
"self.wall_list)"
msgstr ""
"self.physics_engine = arcade.PhysicsEngineSimple(self.player_sprite, "
"self.wall_list)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:221
msgid ""
"This identifies the player character (``player_sprite``), and a list of "
"sprites (``wall_list``) that the player character isn't allowed to pass "
"through."
msgstr ""
"Dies identifiziert die Spielfigur (``player_sprite``) und eine Liste von "
"Sprites (``wall_list``), die die Spielfigur nicht passieren darf."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:224
msgid ""
"Before, we updated all the sprites with a "
"``self.all_sprites_list.update()`` command. With the physics engine, we "
"will instead update the sprites by using the physics engine's update:"
msgstr ""
"Vorher haben wir alle Sprites mit der Anweisung "
"``self.all_sprites_list.update()`` aktualisiert. Mit der Physik-Engine "
"aktualisieren wir stattdessen die Sprites mithilfe des ``update`` der "
"Physik-Engine:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:228
msgid ""
"def update(self, delta_time):\n"
"    self.physics_engine.update()"
msgstr ""
"def update(self, delta_time):\n"
"    self.physics_engine.update()"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:233
msgid "The simple physics engine follows the following algorithm:"
msgstr "Die einfache Physik-Engine folgt dem folgenden Algorithmus:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:235
msgid ""
"Move the player in the x direction according to the player's ``change_x``"
" value."
msgstr ""
"Bewege die Spielfigur in x-Richtung entsprechend dem ``change_x``-Wert "
"der Spielfigur."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:237
msgid ""
"Check the player against the wall list and see if there are any "
"collisions."
msgstr "Überprüfe mit der Wandliste, ob Kollisionen mit der Spielfigur vorliegen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:238
msgid "If the player is colliding:"
msgstr "Wenn die Spielfigur kollidiert:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:240
msgid ""
"If the player is moving right, set the player's right edge to the wall's "
"left edge."
msgstr ""
"Wenn sich die Spielfigur nach rechts bewegt, setze die rechte Kante der "
"Spielfigur auf die linke Kante der Wand."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:242
msgid ""
"If the player is moving left, set the player's left edge to the wall's "
"right edge."
msgstr ""
"Wenn sich die Spielfigur nach links bewegt, setze die linke Kante der "
"Spielfigur auf die rechte Kante der Wand."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:244
msgid ""
"If the player isn't moving left or right, print out a message that we are"
" confused how we hit something when we aren't moving."
msgstr ""
"Wenn sich die Spielfigur nicht nach links oder rechts bewegt, gebe die "
"Nachricht aus, dass wir verwirrt sind, wie wir auf etwas treffen können, "
"wenn wir uns nicht bewegen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:247
msgid "Then we just do the same thing, except with the y coordinates."
msgstr "Dann machen wir dasselbe, nur mit den y-Koordinaten."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:249
msgid "You can see the `physics engine source code`_ on GitHub."
msgstr "Du kannst dir den `Physics Engine Source Code`_ auf GitHub ansehen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:254
msgid "Here's the full example:"
msgstr "Hier ist das vollständige Beispiel:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:256
msgid "sprite_move_walls.py"
msgstr "sprite_move_walls.py"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:256
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"        # This variable holds our simple \"physics engine\"\n"
"        self.physics_engine = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # Create the physics engine. Give it a reference to the player, "
"and\n"
"        # the walls we can't run into.\n"
"        self.physics_engine = "
"arcade.PhysicsEngineSimple(self.player_sprite, self.wall_list)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"    def update(self, delta_time):\n"
"        self.physics_engine.update()\n"
"\n"
"    def on_key_press(self, key, modifiers):\n"
"        \"\"\"Called whenever a key is pressed. \"\"\"\n"
"\n"
"        if key == arcade.key.UP:\n"
"            self.player_sprite.change_y = MOVEMENT_SPEED\n"
"        elif key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.LEFT:\n"
"            self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"    def on_key_release(self, key, modifiers):\n"
"        \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"        if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = 0\n"
"        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = 0\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"        # This variable holds our simple \"physics engine\"\n"
"        self.physics_engine = None\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # Create the physics engine. Give it a reference to the player, "
"and\n"
"        # the walls we can't run into.\n"
"        self.physics_engine = "
"arcade.PhysicsEngineSimple(self.player_sprite, self.wall_list)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"    def update(self, delta_time):\n"
"        self.physics_engine.update()\n"
"\n"
"    def on_key_press(self, key, modifiers):\n"
"        \"\"\"Called whenever a key is pressed. \"\"\"\n"
"\n"
"        if key == arcade.key.UP:\n"
"            self.player_sprite.change_y = MOVEMENT_SPEED\n"
"        elif key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.LEFT:\n"
"            self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"    def on_key_release(self, key, modifiers):\n"
"        \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"        if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = 0\n"
"        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = 0\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:262
msgid "Using a View Port for Scrolling"
msgstr "Verwenden eines Bildausschnitts zum Scrollen"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:264
msgid ""
"What if one screen isn't enough to hold your maze of walls? We can have a"
" world that is larger than just our window. We do this by adjusting the "
"*view port*. Normally coordinate (0, 0) is the lower left corner of our "
"screen. We can change that! We could have an entire world stretch from "
"(0, 0) to (3000, 3000), and have a smaller view port that was 800x640 "
"that scrolled around that."
msgstr ""
"Was ist, wenn ein Bildschirm nicht ausreicht, um Ihr Wandlabyrinth zu "
"enthalten? Wir können eine Welt erstellen, die größer ist als nur unser "
"Fenster. Wir tun dies, indem wir den *View Port* (Bildausschnitt) "
"anpassen. Normalerweise ist die Koordinate (0, 0) die untere linke Ecke "
"unseres Bildschirms. Das können wir ändern! Wir könnten eine ganze Welt "
"von (0, 0) bis (3000, 3000) haben und einen kleineren Ausschnitt von 800 "
"x 640, in dem wir herum scrollen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:271
msgid ""
"The command for using the view port is ``set_viewport``. This command "
"takes four arguments. The first two are the left and bottom boundaries of"
" the window. By default these are zero. That is why (0, 0) is in the "
"lower left of the screen. The next two commands are the top and right "
"coordinates of the screen. By default these are the screen width and "
"height, minus one. So an 800 pixel-wide window would have x-coordinates "
"from 0 - 799."
msgstr ""
"Der Befehl zur Verwendung des Bildausschnitts lautet ``set_viewport``. "
"Dieser Befehl benötigt vier Argumente. Die ersten beiden sind die linken "
"und unteren Grenzen des Fensters. Standardmäßig sind diese Null. Aus "
"diesem Grund befindet sich (0, 0) unten links auf dem Bildschirm. Die "
"nächsten beiden Befehle sind die oberen und rechten Koordinaten des "
"Bildschirms. Standardmäßig sind dies die Bildschirmbreite und -höhe minus"
" eins. Ein 800 Pixel breites Fenster hätte also x-Koordinaten von 0 bis "
"799."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:278
msgid ""
"A command like this would shift the whole \"view\" of the window 200 "
"pixels to the right:"
msgstr ""
"Eine Anweisung wie die folgende verschiebt die gesamte \"Ansicht\" des "
"Fensters um 200 Pixel nach rechts:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:281
msgid ""
"# Specify viewport size by (left, right, bottom, top)\n"
"arcade.set_viewport(200, 200 + SCREEN_WIDTH - 1, 0, SCREEN_HEIGHT - 1)"
msgstr ""
"# Specify viewport size by (left, right, bottom, top)\n"
"arcade.set_viewport(200, 200 + SCREEN_WIDTH - 1, 0, SCREEN_HEIGHT - 1)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:286
msgid ""
"So with a 800 wide pixel window, we would show x-coordinates 200 - 999 "
"instead of 0 - 799."
msgstr ""
"Bei einem 800 Pixel breiten Fenster würden wir also die x-Koordinaten 200"
" - 999 anstelle von 0 - 799 anzeigen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:289
msgid ""
"Instead of hard-coding the shift at 200 pixels, we need to use a variable"
" and have rules around when to shift the view. In our next example, we "
"will create two new instance variables in our application class that hold"
" the left and bottom coordinates for our view port. We'll default to "
"zero."
msgstr ""
"Anstatt die Verschiebung um 200 Pixel fest zu codieren, müssen wir eine "
"Variable verwenden und Regeln festlegen, wann die Ansicht verschoben "
"werden soll. In unserem nächsten Beispiel erstellen wir zwei neue "
"Objektvariablen in unserer Anwendungsklasse, die die linken und unteren "
"Koordinaten für unseren Bildausschnitt enthalten. Wir werden sie "
"standardmäßig auf Null setzen."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:294
msgid ""
"self.view_left = 0\n"
"self.view_bottom = 0"
msgstr ""
"self.view_left = 0\n"
"self.view_bottom = 0"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:300
#, fuzzy
msgid ""
"We are also going to create two new constants. We don't want the player "
"to reach the edge of the screen before we start scrolling. Because then "
"the player would have no idea where she is going. In our example we will "
"set a \"margin\" of 150 pixels. When the player is 150 pixels from the "
"edge of the screen, we'll move the view port so she can see at least 150 "
"pixels around her."
msgstr ""
"Wir werden auch zwei neue Konstanten erstellen. Wir möchten nicht, dass "
"der Spielfigur den Bildschirmrand erreicht, bevor wir mit dem Scrollen "
"beginnen. Denn dann hätte die Spielerin keine Ahnung, wohin sie geht. In "
"unserem Beispiel setzen wir einen \"Rand\" von 40 Pixeln. Befindet sich "
"die Spielfigur 40 Pixel vom Bildschirmrand entfernt, wird der "
"Ansichtsbereich so verschoben, dass sie mindestens 40 Pixel um sich herum"
" sehen kann."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:306
msgid "VIEWPORT_MARGIN = 150"
msgstr ""

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:310
msgid ""
"Next, in our update method, we need to see if the user has moved too "
"close to the edge of the screen and we need to update the boundaries."
msgstr ""
"Als nächstes müssen wir in unserer ``update``-Methode sehen, ob der "
"Benutzer zu nahe am Bildschirmrand ist, und wir müssen die Grenzen "
"aktualisieren."

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:313
#, fuzzy
msgid ""
"# Keep track of if we changed the boundary. We don't want to call the\n"
"# set_viewport command if we didn't change the view port.\n"
"changed = False\n"
"\n"
"# Scroll left\n"
"left_boundary = self.view_left + VIEWPORT_MARGIN\n"
"if self.player_sprite.left < left_boundary:\n"
"    self.view_left -= left_boundary - self.player_sprite.left\n"
"    changed = True\n"
"\n"
"# Scroll right\n"
"right_boundary = self.view_left + SCREEN_WIDTH - VIEWPORT_MARGIN\n"
"if self.player_sprite.right > right_boundary:\n"
"    self.view_left += self.player_sprite.right - right_boundary\n"
"    changed = True\n"
"\n"
"# Scroll up\n"
"top_boundary = self.view_bottom + SCREEN_HEIGHT - VIEWPORT_MARGIN\n"
"if self.player_sprite.top > top_boundary:\n"
"    self.view_bottom += self.player_sprite.top - top_boundary\n"
"    changed = True\n"
"\n"
"# Scroll down\n"
"bottom_boundary = self.view_bottom + VIEWPORT_MARGIN\n"
"if self.player_sprite.bottom < bottom_boundary:\n"
"    self.view_bottom -= bottom_boundary - self.player_sprite.bottom\n"
"    changed = True\n"
"\n"
"# Make sure our boundaries are integer values. While the view port does\n"
"# support floating point numbers, for this application we want every "
"pixel\n"
"# in the view port to map directly onto a pixel on the screen. We don't "
"want\n"
"# any rounding errors.\n"
"self.view_left = int(self.view_left)\n"
"self.view_bottom = int(self.view_bottom)\n"
"\n"
"# If we changed the boundary values, update the view port to match\n"
"if changed:\n"
"    arcade.set_viewport(self.view_left,\n"
"                        SCREEN_WIDTH + self.view_left - 1,\n"
"                        self.view_bottom,\n"
"                        SCREEN_HEIGHT + self.view_bottom - 1)"
msgstr ""
"# Keep track of if we changed the boundary. We don't want to call the\n"
"# set_viewport command if we didn't change the view port.\n"
"changed = False\n"
"\n"
"# Scroll left\n"
"left_bndry = self.view_left + VIEWPORT_MARGIN\n"
"if self.player_sprite.left < left_bndry:\n"
"    self.view_left -= left_bndry - self.player_sprite.left\n"
"    changed = True\n"
"\n"
"# Scroll right\n"
"right_bndry = self.view_left + SCREEN_WIDTH - VIEWPORT_MARGIN\n"
"if self.player_sprite.right > right_bndry:\n"
"    self.view_left += self.player_sprite.right - right_bndry\n"
"    changed = True\n"
"\n"
"# Scroll up\n"
"top_bndry = self.view_bottom + SCREEN_HEIGHT - VIEWPORT_MARGIN\n"
"if self.player_sprite.top > top_bndry:\n"
"    self.view_bottom += self.player_sprite.top - top_bndry\n"
"    changed = True\n"
"\n"
"# Scroll down\n"
"bottom_bndry = self.view_bottom + VIEWPORT_MARGIN\n"
"if self.player_sprite.bottom < bottom_bndry:\n"
"    self.view_bottom -= bottom_bndry - self.player_sprite.bottom\n"
"    changed = True\n"
"\n"
"# Make sure our boundaries are integer values. While the view port does\n"
"# support floating point numbers, for this application we want every "
"pixel\n"
"# in the view port to map directly onto a pixel on the screen. We don't "
"want\n"
"# any rounding errors.\n"
"self.view_left = int(self.view_left)\n"
"self.view_bottom = int(self.view_bottom)\n"
"\n"
"# If we changed the boundary values, update the view port to match\n"
"if changed:\n"
"    arcade.set_viewport(self.view_left,\n"
"                        SCREEN_WIDTH + self.view_left - 1,\n"
"                        self.view_bottom,\n"
"                        SCREEN_HEIGHT + self.view_bottom - 1)"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:357
msgid "The full example is below:"
msgstr "Das vollständige Beispiel findest du unten:"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:359
msgid "sprite_move_scrolling.py"
msgstr "sprite_move_scrolling.py"

#: ../../source/chapters/22_sprites_and_walls/sprites_and_walls.rst:359
#, fuzzy
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"VIEWPORT_MARGIN = 150\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"        # This variable holds our simple \"physics engine\"\n"
"        self.physics_engine = None\n"
"\n"
"        # Manage the view port\n"
"        self.view_left = 0\n"
"        self.view_bottom = 0\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Reset the view port\n"
"        self.view_left = 0\n"
"        self.view_bottom = 0\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # Create the physics engine. Give it a reference to the player, "
"and\n"
"        # the walls we can't run into.\n"
"        self.physics_engine = "
"arcade.PhysicsEngineSimple(self.player_sprite, self.wall_list)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"    def update(self, delta_time):\n"
"        self.physics_engine.update()\n"
"\n"
"        # --- Manage Scrolling ---\n"
"\n"
"        # Keep track of if we changed the boundary. We don't want to call"
" the\n"
"        # set_viewport command if we didn't change the view port.\n"
"        changed = False\n"
"\n"
"        # Scroll left\n"
"        left_boundary = self.view_left + VIEWPORT_MARGIN\n"
"        if self.player_sprite.left < left_boundary:\n"
"            self.view_left -= left_boundary - self.player_sprite.left\n"
"            changed = True\n"
"\n"
"        # Scroll right\n"
"        right_boundary = self.view_left + SCREEN_WIDTH - VIEWPORT_MARGIN\n"
"        if self.player_sprite.right > right_boundary:\n"
"            self.view_left += self.player_sprite.right - right_boundary\n"
"            changed = True\n"
"\n"
"        # Scroll up\n"
"        top_boundary = self.view_bottom + SCREEN_HEIGHT - VIEWPORT_MARGIN"
"\n"
"        if self.player_sprite.top > top_boundary:\n"
"            self.view_bottom += self.player_sprite.top - top_boundary\n"
"            changed = True\n"
"\n"
"        # Scroll down\n"
"        bottom_boundary = self.view_bottom + VIEWPORT_MARGIN\n"
"        if self.player_sprite.bottom < bottom_boundary:\n"
"            self.view_bottom -= bottom_boundary - "
"self.player_sprite.bottom\n"
"            changed = True\n"
"\n"
"        # Make sure our boundaries are integer values. While the view "
"port does\n"
"        # support floating point numbers, for this application we want "
"every pixel\n"
"        # in the view port to map directly onto a pixel on the screen. We"
" don't want\n"
"        # any rounding errors.\n"
"        self.view_left = int(self.view_left)\n"
"        self.view_bottom = int(self.view_bottom)\n"
"\n"
"        # If we changed the boundary values, update the view port to "
"match\n"
"        if changed:\n"
"            arcade.set_viewport(self.view_left,\n"
"                                SCREEN_WIDTH + self.view_left - 1,\n"
"                                self.view_bottom,\n"
"                                SCREEN_HEIGHT + self.view_bottom - 1)\n"
"\n"
"    def on_key_press(self, key, modifiers):\n"
"        \"\"\" Called whenever a key is pressed. \"\"\"\n"
"\n"
"        if key == arcade.key.UP:\n"
"            self.player_sprite.change_y = MOVEMENT_SPEED\n"
"        elif key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.LEFT:\n"
"            self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"    def on_key_release(self, key, modifiers):\n"
"        \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"        if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = 0\n"
"        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = 0\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_BOX = 0.5\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"MOVEMENT_SPEED = 5\n"
"\n"
"VIEWPORT_MARGIN = 40\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" This class represents the main window of the game. \"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.wall_list = None\n"
"\n"
"        # Set up the player\n"
"        self.player_sprite = None\n"
"\n"
"        # This variable holds our simple \"physics engine\"\n"
"        self.physics_engine = None\n"
"\n"
"        # Manage the view port\n"
"        self.view_left = 0\n"
"        self.view_bottom = 0\n"
"\n"
"    def setup(self):\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"        # Reset the view port\n"
"        self.view_left = 0\n"
"        self.view_bottom = 0\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.wall_list = arcade.SpriteList()\n"
"\n"
"        # Reset the score\n"
"        self.score = 0\n"
"\n"
"        # Create the player\n"
"        self.player_sprite = arcade.Sprite(\"images/character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 64\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # --- Manually place walls\n"
"\n"
"        # Manually create and position a box at 300, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 300\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # Manually create and position a box at 364, 200\n"
"        wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"        wall.center_x = 364\n"
"        wall.center_y = 200\n"
"        self.wall_list.append(wall)\n"
"\n"
"        # --- Place boxes inside a loop\n"
"        for x in range(173, 650, 64):\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = x\n"
"            wall.center_y = 350\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # --- Place walls with a list\n"
"        coordinate_list = [[400, 500],\n"
"                           [470, 500],\n"
"                           [400, 570],\n"
"                           [470, 570]]\n"
"\n"
"        # Loop through coordinates\n"
"        for coordinate in coordinate_list:\n"
"            wall = arcade.Sprite(\"images/boxCrate_double.png\", "
"SPRITE_SCALING_BOX)\n"
"            wall.center_x = coordinate[0]\n"
"            wall.center_y = coordinate[1]\n"
"            self.wall_list.append(wall)\n"
"\n"
"        # Create the physics engine. Give it a reference to the player, "
"and\n"
"        # the walls we can't run into.\n"
"        self.physics_engine = "
"arcade.PhysicsEngineSimple(self.player_sprite, self.wall_list)\n"
"\n"
"    def on_draw(self):\n"
"        arcade.start_render()\n"
"        self.wall_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"    def update(self, delta_time):\n"
"        self.physics_engine.update()\n"
"\n"
"        # --- Manage Scrolling ---\n"
"\n"
"        # Track if we need to change the viewport\n"
"\n"
"        changed = False\n"
"\n"
"        # Scroll left\n"
"        left_bndry = self.view_left + VIEWPORT_MARGIN\n"
"        if self.player_sprite.left < left_bndry:\n"
"            self.view_left -= left_bndry - self.player_sprite.left\n"
"            changed = True\n"
"\n"
"        # Scroll right\n"
"        right_bndry = self.view_left + SCREEN_WIDTH - VIEWPORT_MARGIN\n"
"        if self.player_sprite.right > right_bndry:\n"
"            self.view_left += self.player_sprite.right - right_bndry\n"
"            changed = True\n"
"\n"
"        # Scroll up\n"
"        top_bndry = self.view_bottom + SCREEN_HEIGHT - VIEWPORT_MARGIN\n"
"        if self.player_sprite.top > top_bndry:\n"
"            self.view_bottom += self.player_sprite.top - top_bndry\n"
"            changed = True\n"
"\n"
"        # Scroll down\n"
"        bottom_bndry = self.view_bottom + VIEWPORT_MARGIN\n"
"        if self.player_sprite.bottom < bottom_bndry:\n"
"            self.view_bottom -= bottom_bndry - self.player_sprite.bottom\n"
"            changed = True\n"
"\n"
"        self.view_left = int(self.view_left)\n"
"        self.view_bottom = int(self.view_bottom)\n"
"\n"
"        if changed:\n"
"            arcade.set_viewport(self.view_left,\n"
"                                SCREEN_WIDTH + self.view_left - 1,\n"
"                                self.view_bottom,\n"
"                                SCREEN_HEIGHT + self.view_bottom - 1)\n"
"\n"
"    def on_key_press(self, key, modifiers):\n"
"        \"\"\"Called whenever a key is pressed. \"\"\"\n"
"\n"
"        if key == arcade.key.UP:\n"
"            self.player_sprite.change_y = MOVEMENT_SPEED\n"
"        elif key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.LEFT:\n"
"            self.player_sprite.change_x = -MOVEMENT_SPEED\n"
"        elif key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = MOVEMENT_SPEED\n"
"\n"
"    def on_key_release(self, key, modifiers):\n"
"        \"\"\"Called when the user releases a key. \"\"\"\n"
"\n"
"        if key == arcade.key.UP or key == arcade.key.DOWN:\n"
"            self.player_sprite.change_y = 0\n"
"        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:\n"
"            self.player_sprite.change_x = 0\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#~ msgid "VIEWPORT_MARGIN = 40"
#~ msgstr "VIEWPORT_MARGIN = 40"

