# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
# derSuessmann <arcade-book-de@dersuessmann.de>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Arcade Fall 2018\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-02 14:54-0600\n"
"PO-Revision-Date: 2019-07-15 08:39+0200\n"
"Last-Translator: derSuessmann <arcade-book-de@dersuessmann.de>\n"
"Language: de\n"
"Language-Team: German <arcade-book-de@dersuessmann.de>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:3
msgid "Moving Sprites"
msgstr "Sprites bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:5
msgid "How do we get sprites to move?"
msgstr "Wie bringen wir Sprites dazu, sich zu bewegen?"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:7
msgid ""
"To customize our sprite's behavior, we need to subclass the ``Sprite`` "
"class with our own child class. This is easy:"
msgstr ""
"Um das Verhalten unseres Sprites anzupassen, müssen wir unsere eigene "
"Kindklasse von der Klasse ``Sprite`` ableiten. Das ist einfach:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:10
msgid "class Coin(arcade.Sprite):"
msgstr "class Coin(arcade.Sprite):"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:14
msgid ""
"We need to provide each sprite with a ``update`` method. The ``update`` "
"method is automatically called to update the sprite's position."
msgstr ""
"Wir müssen jedem Sprite eine ``update``-Methode zur Verfügung stellen. "
"Die Methode ``update`` wird automatisch aufgerufen, um die Position des "
"Sprites zu aktualisieren."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:18
msgid ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        # Code to move goes here"
msgstr ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        # Code to move goes here"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:25
msgid ""
"Wait! We have a new class called Coin, but we aren't using it. Find in "
"our original code this line:"
msgstr ""
"Warte! Wir haben eine neue Klasse namens ``Coin``, aber wir benutzen sie "
"nicht. Suche in unserem Originalcode diese Zeile:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:28
msgid "coin = arcade.Sprite(\"coin_01.png\", COIN_SPRITE_SCALING)"
msgstr "coin = arcade.Sprite(\"coin_01.png\", COIN_SPRITE_SCALING)"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:32
msgid ""
"See how it is creating an instance of ``Sprite``? We want to create an "
"instance of our new ``Coin`` class instead:"
msgstr ""
"Siehe, wie es ein Exemplar von ``Sprite`` erstellt? Wir möchten "
"stattdessen ein Exemplar unserer neuen ``Coin``-Klasse erstellen:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:35
msgid "coin = Coin(\"coin_01.png\", COIN_SPRITE_SCALING)"
msgstr "coin = Coin(\"coin_01.png\", COIN_SPRITE_SCALING)"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:39
msgid "Now, how do we get the coin to move?"
msgstr "Wie bringen wir nun die Münze dazu, sich zu bewegen?"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:42
msgid "Moving Sprites Down"
msgstr "Sprites nach unten verschieben"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:44
msgid ""
"To get the sprites to \"fall\" down the screen, we need to make their y "
"location smaller. This is easy. Over-ride ``update`` in the sprite and "
"subtract from y each frame:"
msgstr ""
"Damit die Sprites auf dem Bildschirm \"herunterfallen\", müssen wir ihre "
"y-Position verkleinern. Das ist einfach. Überschreibe ``update`` im "
"Sprite und ziehe ``1`` von ``y`` in jedem Frame ab:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:48
msgid ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1"
msgstr ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:55
msgid ""
"Next, create an instance of the ``Coin`` class instead of a ``Sprite`` "
"class."
msgstr ""
"Als nächstes erstelle ein Exemplar der Klasse ``Coin`` anstelle einer "
"Klasse ``Sprite``."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:57
msgid "Sprite Sample Move Down"
msgstr "Sprite-Beispiel - Nach unten bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:57
#, fuzzy
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.remove_from_sprite_lists()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.kill()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:63
msgid ""
"This causes the coins to move down. But once they move off the screen "
"they keep going into negative-coordinate land. We can't see them any "
"more. Sad."
msgstr ""
"Dadurch bewegen sich die Münzen nach unten. Sobald sie sich vom "
"Bildschirm entfernen, begeben sie sich weiter in ein Land mit negativen "
"Koordinaten. Wir können sie nicht mehr sehen. Traurig."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:68
#, fuzzy
msgid ".. image:: chapters\\19_moving_sprites\\coins_down_1.gif"
msgstr ".. image:: chapters/19_moving_sprites/coins_down_1.gif"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:68
msgid "Coins moving down"
msgstr "Münzen bewegen sich nach unten"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:71
msgid "Resetting to the Top"
msgstr "Nach oben zurücksetzen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:73
msgid ""
"We can get around this by resetting the coins up to the top. Here's how "
"its done:"
msgstr ""
"Wir können das umgehen, indem wir die Münzen wieder nach oben setzen. So "
"wird es gemacht:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:76
msgid ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.center_y < 0:\n"
"            self.center_y = SCREEN_HEIGHT"
msgstr ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.center_y < 0:\n"
"            self.center_y = SCREEN_HEIGHT"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:87
msgid ""
"But this isn't perfect. Because if your eyes are fast, you can see the "
"coin 'pop' in and out of existence at the edge. It doesn't smoothly slide"
" off. This is because we move it when the *center* of the coin is at the "
"edge. Not the top of the coin has slid off."
msgstr ""
"Das ist aber nicht perfekt. Denn wenn Ihre Augen schnell sind, können Sie"
" sehen, wie die Münze beim Berühren des unteren Rands plötzlich "
"verschwindet und oben herein ploppt. Es läuft nicht glatt ab. Dies liegt "
"daran, dass wir sie nach oben verschieben, wenn sich die *Mitte* der "
"Münze am unteren Rand befindet. Nicht die Oberseite der Münze ist "
"herausgerutscht."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:92
msgid ""
"There are a couple ways we can do this. Here's one. We'll check at -20 "
"instead of 0. As long as the coin radius is 20 or less, we are good."
msgstr ""
"Es gibt ein paar Möglichkeiten, wie wir das erreichen können. Hier ist "
"eine. Wir werden bei -20 anstelle von 0 prüfen. Solange der Münzradius 20"
" oder weniger beträgt, passt das."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:95
msgid ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.center_y < -20:\n"
"            self.center_y = SCREEN_HEIGHT + 20"
msgstr ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.center_y < -20:\n"
"            self.center_y = SCREEN_HEIGHT + 20"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:106
msgid ""
"There's another way. In addition to ``center_y``, sprites have other "
"members that are useful in these cases. They are ``top``, ``bottom``, "
"``left`` and ``right``. So we can do this:"
msgstr ""
"Es geht auch anders. Neben ``center_y`` haben Sprites andere Attribute, "
"die in diesen Fällen nützlich sind. Das sind ``top``, ``bottom``, "
"``left`` und ``right``. Also können wir das so umsetzen:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:110
msgid ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.top < 0:\n"
"            self.bottom = SCREEN_HEIGHT"
msgstr ""
"class Coin(arcade.Sprite):\n"
"\n"
"    def update(self):\n"
"        self.center_y -= 1\n"
"\n"
"        # See if we went off-screen\n"
"        if self.top < 0:\n"
"            self.bottom = SCREEN_HEIGHT"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:121
msgid ""
"Doing this allows the coins to smoothly slide on and off the screen. But "
"since they reappear at the top, we get repeating patters. See the image "
"below:"
msgstr ""
"Auf diese Weise können die Münzen flüssig auf dem Bildschirm verschoben "
"werden. Aber da sie oben an der gleichen x-Position wieder auftauchen, "
"wiederholen sich die Muster. Siehe die Abbildung unten:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:126
#, fuzzy
msgid ".. image:: chapters\\19_moving_sprites\\pattern.gif"
msgstr ".. image:: chapters/19_moving_sprites/pattern.gif"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:126
msgid "Coins repeating in a pattern"
msgstr "Münzen, die sich in einem Muster wiederholen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:128
msgid "Instead we can randomize it a bit:"
msgstr "Stattdessen können wir es ein wenig zufälliger gestalten:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:130
msgid ""
"def update(self):\n"
"\n"
"    # Move the coin\n"
"    self.center_y -= 1\n"
"\n"
"    # See if the coin has fallen off the bottom of the screen.\n"
"    # If so, reset it.\n"
"    if self.top < 0:\n"
"        # Reset the coin to a random spot above the screen\n"
"        self.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        self.center_x = random.randrange(SCREEN_WIDTH)"
msgstr ""
"def update(self):\n"
"\n"
"    # Move the coin\n"
"    self.center_y -= 1\n"
"\n"
"    # See if the coin has fallen off the bottom of the screen.\n"
"    # If so, reset it.\n"
"    if self.top < 0:\n"
"        # Reset the coin to a random spot above the screen\n"
"        self.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        self.center_x = random.randrange(SCREEN_WIDTH)"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:146
msgid "Never Ending Coins"
msgstr "Nie endende Münzen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:148
msgid ""
"This works, but when we we collect all the coins we are done. What if it "
"was a never-ending set of coins? Instead of \"killing\" the coin, let's "
"reset it to the top of the screen."
msgstr ""
"Das funktioniert, aber wenn wir alle Münzen eingesammelt haben, sind wir "
"fertig. Was wäre, wenn es ein nie endender Strom von Münzen wäre? Anstatt"
" die Münze zu \"vernichten\", setzen wir sie auf den oberen "
"Bildschirmrand zurück."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:152
msgid ""
"def update(self, delta_time):\n"
"    \"\"\" Movement and game logic \"\"\"\n"
"\n"
"    self.coin_list.update()\n"
"\n"
"    hit_list = arcade.check_for_collision_with_list(self.player_sprite, "
"self.coin_list)\n"
"\n"
"    for coin in hit_list:\n"
"        self.score += 1\n"
"\n"
"        # Reset the coin to a random spot above the screen\n"
"        coin.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        coin.center_x = random.randrange(SCREEN_WIDTH)"
msgstr ""
"def update(self, delta_time):\n"
"    \"\"\" Movement and game logic \"\"\"\n"
"\n"
"    self.coin_list.update()\n"
"\n"
"    hit_list = arcade.check_for_collision_with_list(self.player_sprite, "
"self.coin_list)\n"
"\n"
"    for coin in hit_list:\n"
"        self.score += 1\n"
"\n"
"        # Reset the coin to a random spot above the screen\n"
"        coin.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        coin.center_x = random.randrange(SCREEN_WIDTH)"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:169
msgid ""
"We can even take that common code, and move it to a method. Here's a full"
" example:"
msgstr ""
"Wir können sogar diesen gemeinsamen Code nehmen und ihn in eine Methode "
"verschieben. Hier ist das vollständiges Beispiel:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:171
msgid "Full Move Down Sprite Sample"
msgstr "Vollständiges Sprite-Beispiel - nach unten bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:171
#, fuzzy
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"    \"\"\"\n"
"    This class represents the coins on our screen. It is a child class of"
"\n"
"    the arcade library's \"Sprite\" class.\n"
"    \"\"\"\n"
"\n"
"    def reset_pos(self):\n"
"\n"
"        # Reset the coin to a random spot above the screen\n"
"        self.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        self.center_x = random.randrange(SCREEN_WIDTH)\n"
"\n"
"    def update(self):\n"
"\n"
"        # Move the coin\n"
"        self.center_y -= 1\n"
"\n"
"        # See if the coin has fallen off the bottom of the screen.\n"
"        # If so, reset it.\n"
"        if self.top < 0:\n"
"            self.reset_pos()\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.reset_pos()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"    \"\"\"\n"
"    This class represents the coins on our screen. It is a child class of"
"\n"
"    the arcade library's \"Sprite\" class.\n"
"    \"\"\"\n"
"\n"
"    def reset_pos(self):\n"
"\n"
"        # Reset the coin to a random spot above the screen\n"
"        self.center_y = random.randrange(SCREEN_HEIGHT + 20,\n"
"                                         SCREEN_HEIGHT + 100)\n"
"        self.center_x = random.randrange(SCREEN_WIDTH)\n"
"\n"
"    def update(self):\n"
"\n"
"        # Move the coin\n"
"        self.center_y -= 1\n"
"\n"
"        # See if the coin has fallen off the bottom of the screen.\n"
"        # If so, reset it.\n"
"        if self.top < 0:\n"
"            self.reset_pos()\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.kill()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
"\n"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:178
msgid "Bouncing Coins"
msgstr "Abprallende Münzen"

# Replace adding with substracting
#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:180
msgid ""
"Instead of always adding one to the y-coordinate and have the sprites "
"move down, we can keep a vector by using ``change_x`` and ``change_y``. "
"By using these, we can have the sprite bounce around the screen:"
msgstr ""
"Anstatt immer eins von y-Koordinate abzuziehen und die Sprites nach unten"
" zu bewegen, können wir einen Richtungsvektor mit ``change_x`` und "
"``change_y`` beibehalten. Mit diesem können wir das Sprite über den "
"Bildschirm springen lassen:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:186
#, fuzzy
msgid ".. image:: chapters\\19_moving_sprites\\sprites_bouncing.gif"
msgstr ".. image:: chapters/19_moving_sprites/sprites_bouncing.gif"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:186
msgid "Coins bouncing around"
msgstr "Herum hüpfende Münzen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:188
msgid "sprites_sample_move_bouncing.py"
msgstr "sprites_sample_move_bouncing.py"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:188
#, fuzzy
msgid ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def __init__(self, filename, sprite_scaling):\n"
"\n"
"        super().__init__(filename, sprite_scaling)\n"
"\n"
"        self.change_x = 0\n"
"        self.change_y = 0\n"
"\n"
"    def update(self):\n"
"\n"
"        # Move the coin\n"
"        self.center_x += self.change_x\n"
"        self.center_y += self.change_y\n"
"\n"
"        # If we are out-of-bounds, then 'bounce'\n"
"        if self.left < 0:\n"
"            self.change_x *= -1\n"
"\n"
"        if self.right > SCREEN_WIDTH:\n"
"            self.change_x *= -1\n"
"\n"
"        if self.bottom < 0:\n"
"            self.change_y *= -1\n"
"\n"
"        if self.top > SCREEN_HEIGHT:\n"
"            self.change_y *= -1\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"            coin.change_x = random.randrange(-3, 4)\n"
"            coin.change_y = random.randrange(-3, 4)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.remove_from_sprite_lists()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"\"\"\" Sprite Sample Program \"\"\"\n"
"\n"
"import random\n"
"import arcade\n"
"\n"
"# --- Constants ---\n"
"SPRITE_SCALING_PLAYER = 0.5\n"
"SPRITE_SCALING_COIN = 0.2\n"
"COIN_COUNT = 50\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def __init__(self, filename, sprite_scaling):\n"
"\n"
"        super().__init__(filename, sprite_scaling)\n"
"\n"
"        self.change_x = 0\n"
"        self.change_y = 0\n"
"\n"
"    def update(self):\n"
"\n"
"        # Move the coin\n"
"        self.center_x += self.change_x\n"
"        self.center_y += self.change_y\n"
"\n"
"        # If we are out-of-bounds, then 'bounce'\n"
"        if self.left < 0:\n"
"            self.change_x *= -1\n"
"\n"
"        if self.right > SCREEN_WIDTH:\n"
"            self.change_x *= -1\n"
"\n"
"        if self.bottom < 0:\n"
"            self.change_y *= -1\n"
"\n"
"        if self.top > SCREEN_HEIGHT:\n"
"            self.change_y *= -1\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Our custom Window Class\"\"\"\n"
"\n"
"    def __init__(self):\n"
"        \"\"\" Initializer \"\"\"\n"
"        # Call the parent class initializer\n"
"        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, \"Sprite Example\")"
"\n"
"\n"
"        # Variables that will hold sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player info\n"
"        self.player_sprite = None\n"
"        self.score = 0\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def setup(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Score\n"
"        self.score = 0\n"
"\n"
"        # Set up the player\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING_PLAYER)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 50\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        # Create the coins\n"
"        for i in range(COIN_COUNT):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING_COIN)\n"
"\n"
"            # Position the coin\n"
"            coin.center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.center_y = random.randrange(SCREEN_HEIGHT)\n"
"            coin.change_x = random.randrange(-3, 4)\n"
"            coin.change_y = random.randrange(-3, 4)\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"    def on_draw(self):\n"
"        \"\"\" Draw everything \"\"\"\n"
"        arcade.start_render()\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = f\"Score: {self.score}\"\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        \"\"\" Handle Mouse Motion \"\"\"\n"
"\n"
"        # Move the center of the player sprite to match the mouse x, y\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            coin.kill()\n"
"            self.score += 1\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" Main method \"\"\"\n"
"    window = MyGame()\n"
"    window.setup()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

# TODO
#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:194
#, fuzzy
msgid ""
"TODO: Put in some text about spawning a sprite too close to the edge. "
"Also make a refer to it from the final project."
msgstr ""
"TODO: Fügen Sie einen Text zum Vermehren eines Sprites zu nahe an der "
"Kante ein. Nehmen Sie auch Bezug auf das endgültige Projekt."

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:198
msgid ""
"Take what you've learned from the example above, and see if you can "
"replicate this:"
msgstr ""
"Nimm, was du aus dem obigen Beispiel gelernt hast, und prüfe, ob die "
"folgenden Abläufe reproduzieren kannst:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:203
#, fuzzy
msgid ".. image:: chapters\\19_moving_sprites\\Test_Pattern.gif"
msgstr ".. image:: chapters/19_moving_sprites/Test_Pattern.gif"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:203
msgid "Test Pattern"
msgstr "Testmuster"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:206
msgid "Coins Moving In Circles"
msgstr "Münzen, die sich in Kreisen bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:210
#, fuzzy
msgid ".. image:: chapters\\19_moving_sprites\\sprites_circle.gif"
msgstr ".. image:: chapters/19_moving_sprites/sprites_circle.gif"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:210
msgid "Coins moving in a circle"
msgstr "Münzen, die sich im Kreis bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:212
msgid "sprites_circle.py"
msgstr "sprites_circle.py"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:212
#, fuzzy
msgid ""
"import random\n"
"import arcade\n"
"import math\n"
"\n"
"SPRITE_SCALING = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def __init__(self, filename, sprite_scaling):\n"
"        \"\"\" Constructor. \"\"\"\n"
"        # Call the parent class (Sprite) constructor\n"
"        super().__init__(filename, sprite_scaling)\n"
"\n"
"        # Current angle in radians\n"
"        self.circle_angle = 0\n"
"\n"
"        # How far away from the center to orbit, in pixels\n"
"        self.circle_radius = 0\n"
"\n"
"        # How fast to orbit, in radians per frame\n"
"        self.circle_speed = 0.008\n"
"\n"
"        # Set the center of the point we will orbit around\n"
"        self.circle_center_x = 0\n"
"        self.circle_center_y = 0\n"
"\n"
"    def update(self):\n"
"\n"
"        \"\"\" Update the ball's position. \"\"\"\n"
"        # Calculate a new x, y\n"
"        self.center_x = self.circle_radius * math.sin(self.circle_angle) "
"\\\n"
"            + self.circle_center_x\n"
"        self.center_y = self.circle_radius * math.cos(self.circle_angle) "
"\\\n"
"            + self.circle_center_y\n"
"\n"
"        # Increase the angle in prep for the next round.\n"
"        self.circle_angle += self.circle_speed\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Main application class. \"\"\"\n"
"\n"
"    def __init__(self, width, height):\n"
"\n"
"        super().__init__(width, height)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player\n"
"        self.score = 0\n"
"        self.player_sprite = None\n"
"\n"
"    def start_new_game(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Set up the player\n"
"        self.score = 0\n"
"\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 70\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        for i in range(50):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING / 3)\n"
"\n"
"            # Position the center of the circle the coin will orbit\n"
"            coin.circle_center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.circle_center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Random radius from 10 to 200\n"
"            coin.circle_radius = random.randrange(10, 200)\n"
"\n"
"            # Random start angle from 0 to 2pi\n"
"            coin.circle_angle = random.random() * 2 * math.pi\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"\n"
"        # This command has to happen before we start drawing\n"
"        arcade.start_render()\n"
"\n"
"        # Draw all the sprites.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = \"Score: \" + str(self.score)\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            self.score += 1\n"
"            coin.remove_from_sprite_lists()\n"
"\n"
"\n"
"def main():\n"
"    window = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT)\n"
"    window.start_new_game()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"
msgstr ""
"import random\n"
"import arcade\n"
"import math\n"
"\n"
"SPRITE_SCALING = 0.5\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"class Coin(arcade.Sprite):\n"
"\n"
"    def __init__(self, filename, sprite_scaling):\n"
"        \"\"\" Constructor. \"\"\"\n"
"        # Call the parent class (Sprite) constructor\n"
"        super().__init__(filename, sprite_scaling)\n"
"\n"
"        # Current angle in radians\n"
"        self.circle_angle = 0\n"
"\n"
"        # How far away from the center to orbit, in pixels\n"
"        self.circle_radius = 0\n"
"\n"
"        # How fast to orbit, in radians per frame\n"
"        self.circle_speed = 0.008\n"
"\n"
"        # Set the center of the point we will orbit around\n"
"        self.circle_center_x = 0\n"
"        self.circle_center_y = 0\n"
"\n"
"    def update(self):\n"
"\n"
"        \"\"\" Update the ball's position. \"\"\"\n"
"        # Calculate a new x, y\n"
"        self.center_x = self.circle_radius * math.sin(self.circle_angle) "
"\\\n"
"            + self.circle_center_x\n"
"        self.center_y = self.circle_radius * math.cos(self.circle_angle) "
"\\\n"
"            + self.circle_center_y\n"
"\n"
"        # Increase the angle in prep for the next round.\n"
"        self.circle_angle += self.circle_speed\n"
"\n"
"\n"
"class MyGame(arcade.Window):\n"
"    \"\"\" Main application class. \"\"\"\n"
"\n"
"    def __init__(self, width, height):\n"
"\n"
"        super().__init__(width, height)\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = None\n"
"        self.coin_list = None\n"
"\n"
"        # Set up the player\n"
"        self.score = 0\n"
"        self.player_sprite = None\n"
"\n"
"    def start_new_game(self):\n"
"        \"\"\" Set up the game and initialize the variables. \"\"\"\n"
"\n"
"        # Sprite lists\n"
"        self.player_list = arcade.SpriteList()\n"
"        self.coin_list = arcade.SpriteList()\n"
"\n"
"        # Set up the player\n"
"        self.score = 0\n"
"\n"
"        # Character image from kenney.nl\n"
"        self.player_sprite = arcade.Sprite(\"character.png\", "
"SPRITE_SCALING)\n"
"        self.player_sprite.center_x = 50\n"
"        self.player_sprite.center_y = 70\n"
"        self.player_list.append(self.player_sprite)\n"
"\n"
"        for i in range(50):\n"
"\n"
"            # Create the coin instance\n"
"            # Coin image from kenney.nl\n"
"            coin = Coin(\"coin_01.png\", SPRITE_SCALING / 3)\n"
"\n"
"            # Position the center of the circle the coin will orbit\n"
"            coin.circle_center_x = random.randrange(SCREEN_WIDTH)\n"
"            coin.circle_center_y = random.randrange(SCREEN_HEIGHT)\n"
"\n"
"            # Random radius from 10 to 200\n"
"            coin.circle_radius = random.randrange(10, 200)\n"
"\n"
"            # Random start angle from 0 to 2pi\n"
"            coin.circle_angle = random.random() * 2 * math.pi\n"
"\n"
"            # Add the coin to the lists\n"
"            self.coin_list.append(coin)\n"
"\n"
"        # Don't show the mouse cursor\n"
"        self.set_mouse_visible(False)\n"
"\n"
"        # Set the background color\n"
"        arcade.set_background_color(arcade.color.AMAZON)\n"
"\n"
"    def on_draw(self):\n"
"\n"
"        # This command has to happen before we start drawing\n"
"        arcade.start_render()\n"
"\n"
"        # Draw all the sprites.\n"
"        self.coin_list.draw()\n"
"        self.player_list.draw()\n"
"\n"
"        # Put the text on the screen.\n"
"        output = \"Score: \" + str(self.score)\n"
"        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)\n"
"\n"
"    def on_mouse_motion(self, x, y, dx, dy):\n"
"        self.player_sprite.center_x = x\n"
"        self.player_sprite.center_y = y\n"
"\n"
"    def update(self, delta_time):\n"
"        \"\"\" Movement and game logic \"\"\"\n"
"\n"
"        # Call update on all sprites (The sprites don't do much in this\n"
"        # example though.)\n"
"        self.coin_list.update()\n"
"\n"
"        # Generate a list of all sprites that collided with the player.\n"
"        hit_list = "
"arcade.check_for_collision_with_list(self.player_sprite,\n"
"                                                        self.coin_list)\n"
"\n"
"        # Loop through each colliding sprite, remove it, and add to the "
"score.\n"
"        for coin in hit_list:\n"
"            self.score += 1\n"
"            coin.kill()\n"
"\n"
"\n"
"def main():\n"
"    window = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT)\n"
"    window.start_new_game()\n"
"    arcade.run()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()\n"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:218
#, fuzzy
msgid "Rotating Sprites"
msgstr "Sprites bewegen"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:220
msgid ""
"Sprites can easily be rotated by setting their ``angle`` attribute. "
"Angles are in degrees. So the following will flip the player upside down:"
msgstr ""
"Sprites können einfach gedreht werden, indem das Attribut ``angle`` "
"gesetzt wird. Winkel werden in Grad angegeben. Das Folgende wird die "
"Spielfigur auf den Kopf stellen:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:223
msgid "self.player_sprite.angle = 180"
msgstr "self.player_sprite.angle = 180"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:227
msgid ""
"If you put this in the coin's ``update`` method, it would cause the coins"
" to spin:"
msgstr ""
"Wenn du dies in die Methode ``update`` der Münze einfügst, werden die "
"Münzen gedreht:"

#: ../../source/chapters/19_moving_sprites/moving_sprites.rst:230
msgid ""
"self.angle += 1\n"
"\n"
"# If we rotate past 360, reset it back a turn.\n"
"if self.angle > 359:\n"
"    self.angle -= 360"
msgstr ""
"self.angle += 1\n"
"\n"
"# If we rotate past 360, reset it back a turn.\n"
"if self.angle > 359:\n"
"    self.angle -= 360"

