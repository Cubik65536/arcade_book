# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-13 15:19-0500\n"
"PO-Revision-Date: 2020-04-03 18:44+0000\n"
"Language-Team: Swedish (https://www.transifex.com/arcade-academy/teams/108729/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/chapters/30_print_formatting/print_formatting.rst:2
msgid "String Formatting"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:4
msgid ""
"Looking for an easy way to format variables for display, and mix them with "
"other text? Add thousands separators (commas in the US) to a large number, "
"and format decimals the way you want them? You need \"string formatting.\""
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:9
msgid ""
"Python has three ways to format strings. The `old string formatting`_ which "
"originally came from how older languages such as C did formatting. The newer"
" way introduced in Python 3 that was supposed to be better, but arguably "
"wasn't. And the new way introduced in Python 3.6 with `PEP-498`_ . We'll "
"cover the newest way."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:20
msgid "Quick Reference"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:21
msgid ""
"Here is a quick table for reference when doing text formatting. For a "
"detailed explanation of how text formatting works, keep reading."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:25
msgid "Example Formatting Commands"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:29
msgid "Number"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:30
msgid "Format"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:31
msgid "Output"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:32
msgid "Description"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:33
#: ../../source/chapters/30_print_formatting/print_formatting.rst:37
#: ../../source/chapters/30_print_formatting/print_formatting.rst:45
msgid "``x = 3.1415926``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:34
msgid "``print(f\"{x:.2f}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:35
msgid "``3.14``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:36
msgid "2 decimal places"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:38
#: ../../source/chapters/30_print_formatting/print_formatting.rst:42
msgid "``print(f\"{x:+.2f}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:39
msgid "``+3.14``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:40
#: ../../source/chapters/30_print_formatting/print_formatting.rst:44
msgid "2 decimal places with sign"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:41
msgid "``x = -1``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:43
msgid "``-1.00``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:46
msgid "``print(f\"{x:.0f}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:47
msgid "``3``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:48
msgid "No decimal places (will round)"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:49
msgid "``x = 5``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:50
msgid "``print(f\"{x:0>2d}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:51
msgid "``05``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:52
msgid "Pad with zeros on the left"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:53
msgid "``x = 1000000``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:54
msgid "``print(f\"{x:,}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:55
msgid "``1,000,000``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:56
msgid "Number format with comma separator"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:57
msgid "``x = 0.25``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:58
msgid "``print(f\"{x:.2%}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:59
msgid "``25.00%``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:60
msgid "Format percentage"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:61
msgid "``x = 1000000000``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:62
msgid "``print(f\"{x:.2e}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:63
msgid "``1.00e+09``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:64
msgid "Exponent notation"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:65
#: ../../source/chapters/30_print_formatting/print_formatting.rst:69
#: ../../source/chapters/30_print_formatting/print_formatting.rst:73
msgid "``x = 11``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:66
msgid "``print(f\"{x:>10d}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:67
msgid "``........11``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:68
msgid "Right aligned"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:70
msgid "``print(f\"{x:<10d}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:71
msgid "``11........``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:72
msgid "Left aligned"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:74
msgid "``print(f\"{x:^10d}\")``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:75
msgid "``....11....``"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:76
msgid "Center aligned"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:81
msgid "Decimal Numbers"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:83
msgid ""
"Try running the following program, which prints out several random numbers."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:85
msgid "Print an unformatted list of numbers"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:85
msgid ""
"import random\n"
"\n"
"for i in range(10):\n"
"    x = random.randrange(120)\n"
"    print(\"My number: \", x)"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:95
msgid "The output is left justified and numbers look terrible:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:97
msgid ""
"My number:  30\n"
"My number:  2\n"
"My number:  101\n"
"My number:  3\n"
"My number:  44\n"
"My number:  111\n"
"My number:  100\n"
"My number:  48\n"
"My number:  27\n"
"My number:  92"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:110
msgid ""
"We can use string formatting to make the list of numbers look better by "
"right-justifying them. The first step is to use the \"Literal String "
"Interpolation\" on the string. See below:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:114
msgid ""
"import random\n"
"\n"
"for i in range(10):\n"
"    x = random.randrange(120)\n"
"    print(f\"My number: {x}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:122
msgid ""
"This gets our program closer to right-justifying the number, but we aren't "
"quite there yet. See how the string starts with ``f``?"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:125
msgid ""
"The string will not print out the curly braces ``{}`` but instead replace "
"them with the value in ``x``. The output (below) looks just like what we had"
" before."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:128
#: ../../source/chapters/30_print_formatting/print_formatting.rst:156
#: ../../source/chapters/30_print_formatting/print_formatting.rst:201
#: ../../source/chapters/30_print_formatting/print_formatting.rst:228
#: ../../source/chapters/30_print_formatting/print_formatting.rst:284
#: ../../source/chapters/30_print_formatting/print_formatting.rst:306
#: ../../source/chapters/30_print_formatting/print_formatting.rst:328
#: ../../source/chapters/30_print_formatting/print_formatting.rst:376
#: ../../source/chapters/30_print_formatting/print_formatting.rst:469
#: ../../source/chapters/30_print_formatting/print_formatting.rst:509
#: ../../source/chapters/30_print_formatting/print_formatting.rst:548
#: ../../source/chapters/30_print_formatting/print_formatting.rst:570
#: ../../source/chapters/30_print_formatting/print_formatting.rst:615
#: ../../source/chapters/30_print_formatting/print_formatting.rst:648
msgid "The output:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:128
msgid ""
"My number: 23\n"
"My number: 92\n"
"My number: 102\n"
"My number: 19\n"
"My number: 85\n"
"My number: 114\n"
"My number: 37\n"
"My number: 101\n"
"My number: 35\n"
"My number: 18"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:142
msgid ""
"To right justify, we add more information about how to format the number to "
"the curly braces ``{}``:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:145
msgid "Right justified list of numbers"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:145
msgid ""
"import random\n"
"\n"
"for i in range(10):\n"
"    x = random.randrange(120)\n"
"    print(f\"My number: {x:3}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:156
msgid ""
"My number:  37\n"
"My number: 108\n"
"My number: 117\n"
"My number:  55\n"
"My number:  19\n"
"My number:  97\n"
"My number:  78\n"
"My number:  12\n"
"My number:  29\n"
"My number:   0"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:170
msgid ""
"This is better; we have right justified numbers! But how does it work? The "
"``:3`` that we added isn't exactly intuitive. Looks like we just added a "
"random emoji."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:174
msgid ""
"Here's the breakdown: The ``{ }`` tells the computer we are going to format "
"a number. Inside we put the variable we want to format, ``x`` in this case. "
"After the variable, we put a ``:`` to tell the computer we are about to give"
" it formatting information."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:179
msgid ""
"In this case we give it a 3 to specify a field width of three characters. "
"The field width value tells the computer to try to fit the number into a "
"field three characters wide. By default, it will try to right-justify "
"numbers and left-justify text."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:184
msgid ""
"Even better, the program no longer needs to call ``str( )`` to convert the "
"number to a string! Leave the string conversions out."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:187
msgid "What if you had large numbers? Let's make bigger random numbers:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:189
msgid "Bigger numbers that are hard to read"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:189
msgid ""
"import random\n"
"\n"
"for i in range(10):\n"
"    x = random.randrange(100000)\n"
"    print(f\"My number: {x:6}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:199
msgid ""
"This gives output that is right justified, but still doesn't look good."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:201
msgid ""
"My number:  89807\n"
"My number:   5177\n"
"My number:  24067\n"
"My number:  19887\n"
"My number:  54155\n"
"My number:  49288\n"
"My number:  31412\n"
"My number:  49633\n"
"My number:  43406\n"
"My number:  37398"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:215
msgid ""
"Where are the commas? This list would look better with separators between "
"each three digits. Take a look at the next example to see how they are added"
" in:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:218
msgid "Adding a thousands separator"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:218
msgid ""
"import random\n"
"\n"
"for i in range(10):\n"
"    x = random.randrange(100000)\n"
"    print(f\"My number: {x:6,}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:230
msgid ""
"My number: 86,631\n"
"My number: 57,165\n"
"My number: 19,835\n"
"My number: 22,560\n"
"My number: 43,161\n"
"My number: 16,604\n"
"My number: 20,544\n"
"My number: 33,906\n"
"My number: 89,846\n"
"My number: 27,350"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:243
msgid ""
"We added a comma after the field width specifier, and now our numbers have "
"commas. That comma must go after the field width specifier, not before. "
"Commas are included in calculating the field width. For example, 1,024 has a"
" field width of 5, not 4."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:248
msgid ""
"We can print multiple values, and combine the values with text. Run the code"
" below."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:251
msgid "Printing more than one variable at a time"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:251
msgid ""
"x = 5\n"
"y = 66\n"
"z = 777\n"
"print(f\"A - '{x}' B - '{y}' C - '{z}'\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:260
msgid ""
"The program will substitute numbers in for the curly braces, and still print"
" out all of the other text in the string:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:263
msgid "A - '5' B - '66' C - '777'"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:268
msgid "Strings"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:270
msgid "Let's look at how to format strings."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:272
msgid "The following list looks terrible."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:274
msgid "Terrible looking list"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:274
msgid ""
"my_fruit = [\"Apples\",\"Oranges\",\"Grapes\",\"Pears\"]\n"
"my_calories = [4, 300, 70, 30]\n"
"\n"
"for i in range(4):\n"
"    print(my_fruit[i], \"are\", my_calories[i], \"calories.\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:286
msgid ""
"Apples are 4 calories.\n"
"Oranges are 300 calories.\n"
"Grapes are 70 calories.\n"
"Pears are 30 calories."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:293
msgid ""
"Now try it using the format command. Note how we can put additional text and"
" more than one value into the same line."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:296
msgid "Formatting a list of fruit"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:296
msgid ""
"my_fruit = [\"Apples\", \"Oranges\", \"Grapes\", \"Pears\"]\n"
"my_calories = [4, 300, 70, 30]\n"
"\n"
"for i in range(4):\n"
"    print(f\"{my_fruit[i]:7} are {my_calories[i]:3} calories.\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:306
msgid ""
"Apples  are   4 calories.\n"
"Oranges are 300 calories.\n"
"Grapes  are  70 calories.\n"
"Pears   are  30 calories."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:314
msgid ""
"That's pretty cool, and it looks the way we want it. But what if we didn't "
"want the numbers right justified, and the text left justified? We can use "
"the ``<`` and ``>`` characters like the following example:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:318
msgid "Specifying right/left alignment"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:318
msgid ""
"my_fruit = [\"Apples\", \"Oranges\", \"Grapes\", \"Pears\"]\n"
"my_calories = [4, 300, 70, 30]\n"
"\n"
"for i in range(4):\n"
"    print(f\"{my_fruit[i]:>7} are {my_calories[i]:<3} calories.\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:328
msgid ""
" Apples are 4   calories.\n"
"Oranges are 300 calories.\n"
" Grapes are 70  calories.\n"
"  Pears are 30  calories."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:339
msgid "Clock Example with Leading Zeros"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:341
msgid "This produces output that isn't right:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:343
msgid "Terrible looking clock"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:343
msgid ""
"for hours in range(1,13):\n"
"    for minutes in range(0,60):\n"
"        print(f\"Time {hours}:{minutes}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:352
msgid "The not-very-good output:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:352
msgid ""
"Time 8:56\n"
"Time 8:57\n"
"Time 8:58\n"
"Time 8:59\n"
"Time 9:0\n"
"Time 9:1\n"
"Time 9:2"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:363
msgid ""
"We need to use leading zeros for displaying numbers in clocks. Rather than "
"specify a 2 for the field width, instead use 02. This will pad the field "
"with zeros rather than spaces."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:367
msgid "Formatting time output with leading zeros"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:367
msgid ""
"for hours in range(1, 13):\n"
"    for minutes in range(0, 60):\n"
"        print(f\"Time {hours:02}:{minutes:02}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:376
msgid ""
"Time 08:56\n"
"Time 08:57\n"
"Time 08:58\n"
"Time 08:59\n"
"Time 09:00\n"
"Time 09:01\n"
"Time 09:02"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:388
msgid "Floating Point Numbers"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:390
msgid ""
"We can also control floating point output. Examine the following code and "
"its output:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:392
msgid "Formatting float point numbers"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:392
msgid ""
"x = 0.1\n"
"y = 123.456789\n"
"\n"
"print(f\"{x:.1}  {y:.1}\")\n"
"print(f\"{x:.2}  {y:.2}\")\n"
"print(f\"{x:.3}  {y:.3}\")\n"
"print(f\"{x:.4}  {y:.4}\")\n"
"print(f\"{x:.5}  {y:.5}\")\n"
"print(f\"{x:.6}  {y:.6}\")\n"
"\n"
"print()\n"
"print(f\"{x:.1f}  {y:.1f}\")\n"
"print(f\"{x:.2f}  {y:.2f}\")\n"
"print(f\"{x:.3f}  {y:.3f}\")\n"
"print(f\"{x:.4f}  {y:.4f}\")\n"
"print(f\"{x:.5f}  {y:.5f}\")\n"
"print(f\"{x:.6f}  {y:.6f}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:414
msgid "And here's the output for that code:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:414
msgid ""
"0.1  1e+02\n"
"0.1  1.2e+02\n"
"0.1  1.23e+02\n"
"0.1  123.5\n"
"0.1  123.46\n"
"0.1  123.457\n"
"\n"
"0.1  123.5\n"
"0.10  123.46\n"
"0.100  123.457\n"
"0.1000  123.4568\n"
"0.10000  123.45679\n"
"0.100000  123.456789"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:432
msgid ""
"A format of ``.2`` means to display the number with two digits of precision."
" Unfortunately this means if we display the number ``123`` which has three "
"significant numbers rather than rounding it we get the number in scientific "
"notation: ``1.2e+02``."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:437
msgid ""
"A format of ``.2f`` (note the ``f``) means to display the number with two "
"digits after the decimal point. So the number 1 would display as ``1.00`` "
"and the number ``1.5555`` would display as ``1.56``."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:441
msgid "A program can also specify a field width character:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:443
#: ../../source/chapters/30_print_formatting/print_formatting.rst:492
#: ../../source/chapters/30_print_formatting/print_formatting.rst:521
#: ../../source/chapters/30_print_formatting/print_formatting.rst:588
#: ../../source/chapters/30_print_formatting/print_formatting.rst:634
msgid "Specifying a field width character"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:443
msgid ""
"x = 0.1\n"
"y = 123.456789\n"
"\n"
"print(f\"My number: '{x:10.1}' and '{y:10.1}'\")\n"
"print(f\"My number: '{x:10.2}' and '{y:10.2}'\")\n"
"print(f\"My number: '{x:10.3}' and '{y:10.3}'\")\n"
"print(f\"My number: '{x:10.4}' and '{y:10.4}'\")\n"
"print(f\"My number: '{x:10.5}' and '{y:10.5}'\")\n"
"print(f\"My number: '{x:10.6}' and '{y:10.6}'\")\n"
"\n"
"print()\n"
"print(f\"My number: '{x:10.1f}' and '{y:10.1f}'\")\n"
"print(f\"My number: '{x:10.2f}' and '{y:10.2f}'\")\n"
"print(f\"My number: '{x:10.3f}' and '{y:10.3f}'\")\n"
"print(f\"My number: '{x:10.4f}' and '{y:10.4f}'\")\n"
"print(f\"My number: '{x:10.5f}' and '{y:10.5f}'\")\n"
"print(f\"My number: '{x:10.6f}' and '{y:10.6f}'\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:465
msgid ""
"The format ``10.2f`` does not mean 10 digits before the decimal and two "
"after. It means a total field width of 10. So there will be 7 digits before "
"the decimal, the decimal which counts as one more, and 2 digits after."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:469
msgid ""
"My number: '       0.1' and '     1e+02'\n"
"My number: '       0.1' and '   1.2e+02'\n"
"My number: '       0.1' and '  1.23e+02'\n"
"My number: '       0.1' and '     123.5'\n"
"My number: '       0.1' and '    123.46'\n"
"My number: '       0.1' and '   123.457'\n"
"\n"
"My number: '       0.1' and '     123.5'\n"
"My number: '      0.10' and '    123.46'\n"
"My number: '     0.100' and '   123.457'\n"
"My number: '    0.1000' and '  123.4568'\n"
"My number: '   0.10000' and ' 123.45679'\n"
"My number: '  0.100000' and '123.456789'"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:488
msgid "Printing Dollars and Cents"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:490
msgid ""
"If you want to print a floating point number for cost, you use an f. See "
"below:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:492
msgid ""
"cost1 = 3.07\n"
"tax1 = cost1 * 0.06\n"
"total1 = cost1 + tax1\n"
"\n"
"print(f\"Cost:  ${cost1:5.2f}\")\n"
"print(f\"Tax:    {tax1:5.2f}\")\n"
"print(f\"-------------\")\n"
"print(f\"Total: ${total1:5.2f}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:505
msgid ""
"Remember! It would be easy to think that %5.2f would mean five digits, a "
"decimal, followed by two digits. But it does not. It means a total field "
"width of five, including the decimal and the two digits after. Here's the "
"output:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:509
msgid ""
"Cost:  $ 3.07\n"
"Tax:     0.18\n"
"-------------\n"
"Total: $ 3.25"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:517
msgid ""
"Danger! The above code has a mistake that is very common when working with "
"financial transactions. Can you spot it? Try spotting it with the expanded "
"code example below:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:521
msgid ""
"cost1 = 3.07\n"
"tax1 = cost1 * 0.06\n"
"total1 = cost1 + tax1\n"
"\n"
"print(f\"Cost:  ${cost1:5.2f}\")\n"
"print(f\"Tax:    {tax1:5.2f}\")\n"
"print(f\"-------------\")\n"
"print(f\"Total: ${total1:5.2f}\")\n"
"\n"
"cost2 = 5.07\n"
"tax2 = cost2 * 0.06\n"
"total2 = cost2 + tax2\n"
"\n"
"print()\n"
"print(f\"Cost:  ${cost2:5.2f}\")\n"
"print(f\"Tax:    {tax2:5.2f}\")\n"
"print(f\"-------------\")\n"
"print(f\"Total: ${total2:5.2f}\")\n"
"\n"
"print()\n"
"grand_total = total1 + total2\n"
"print(f\"Grand total: ${grand_total:5.2f}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:548
msgid ""
"Cost:  $ 3.07\n"
"Tax:     0.18\n"
"------------\n"
"Total: $ 3.25\n"
"\n"
"Cost:  $ 5.07\n"
"Tax:     0.30\n"
"-------------\n"
"Total: $ 5.37\n"
"\n"
"Grand total: $ 8.63"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:563
msgid ""
"Spot the mistake? You have to watch out for rounding errors! Look at that "
"example, it seems like the total should be ``$ 8.62`` but it isn't."
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:566
msgid ""
"Print formatting doesn't change the number, only what is output! If we "
"changed the print formatting to include three digits after the decimal the "
"reason for the error becomes more apparent:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:570
msgid ""
"Cost:  $3.070\n"
"Tax:    0.184\n"
"-------------\n"
"Total: $3.254\n"
"\n"
"Cost:  $5.070\n"
"Tax:    0.304\n"
"-------------\n"
"Total: $5.374\n"
"\n"
"Grand total: $8.628"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:585
msgid ""
"Again, formatting for the display does not change the number. Use the round "
"command to change the value and truly round. See below:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:588
msgid ""
"cost1 = 3.07\n"
"tax1 = round(cost1 * 0.06, 2)\n"
"total1 = cost1 + tax1\n"
"\n"
"print(f\"Cost:  ${cost1:5.2f}\")\n"
"print(f\"Tax:    {tax1:5.2f}\")\n"
"print(f\"-------------\")\n"
"print(f\"Total: ${total1:5.2f}\")\n"
"\n"
"cost2 = 5.07\n"
"tax2 = round(cost2 * 0.06, 2)\n"
"total2 = cost2 + tax2\n"
"\n"
"print()\n"
"print(f\"Cost:  ${cost2:5.2f}\")\n"
"print(f\"Tax:    {tax2:5.2f}\")\n"
"print(f\"-------------\")\n"
"print(f\"Total: ${total2:5.2f}\")\n"
"\n"
"print()\n"
"grand_total = total1 + total2\n"
"print(f\"Grand total: ${grand_total:5.2f}\")"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:615
msgid ""
"Cost:  $ 3.07\n"
"Tax:     0.18\n"
"-------------\n"
"Total: $ 3.25\n"
"\n"
"Cost:  $ 5.07\n"
"Tax:     0.30\n"
"-------------\n"
"Total: $ 5.37\n"
"\n"
"Grand total: $ 8.62"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:631
msgid ""
"The round command controls how many digits after the decimal we round to. It"
" returns the rounded value but does not change the original value. See "
"below:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:634
msgid ""
"x = 1234.5678\n"
"print(round(x, 2))\n"
"print(round(x, 1))\n"
"print(round(x, 0))\n"
"print(round(x, -1))\n"
"print(round(x, -2))"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:645
msgid ""
"See below to figure out how feeding the round() function values like -2 for "
"the digits after the decimal affects the output:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:648
msgid ""
"1234.57\n"
"1234.6\n"
"1235.0\n"
"1230.0\n"
"1200.0"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:658
msgid "Use in Arcade Programs"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:659
msgid ""
"We don't just have to format strings for print statements. The example "
"`timer.py`_ uses string formatting to make an on-screen timer:"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:664
msgid "Code from timer.py"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:664
msgid ""
"def on_draw(self):\n"
"    \"\"\" Use this function to draw everything to the screen. \"\"\"\n"
"\n"
"    # Start the render. This must happen before any drawing\n"
"    # commands. We do NOT need an stop render command.\n"
"    arcade.start_render()\n"
"\n"
"    # Calculate minutes\n"
"    minutes = int(self.total_time) // 60\n"
"\n"
"    # Calculate seconds by using a modulus (remainder)\n"
"    seconds = int(self.total_time) % 60\n"
"\n"
"    # Figure out our output\n"
"    output = f\"Time: {minutes:02d}:{seconds:02d}\"\n"
"\n"
"    # Output the timer text.\n"
"    arcade.draw_text(output, 300, 300, arcade.color.BLACK, 30)\n"
"\n"
"def update(self, delta_time):\n"
"    \"\"\"\n"
"    All the logic to move, and the game logic goes here.\n"
"    \"\"\"\n"
"    self.total_time += delta_time"
msgstr ""

#: ../../source/chapters/30_print_formatting/print_formatting.rst:693
msgid ""
"You can also use it to display the score, or any other statistics you'd like"
" to show the player."
msgstr ""
