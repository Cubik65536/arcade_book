# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-13 15:19-0500\n"
"PO-Revision-Date: 2020-04-03 18:43+0000\n"
"Language-Team: Swedish (https://www.transifex.com/arcade-academy/teams/108729/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/chapters/10_if_statements/if_statements.rst:2
msgid "If Statements"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rstNone
msgid ""
".. image:: images/video.svg\n"
"   :alt: Video link"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:9
msgid "Video: https://youtu.be/CXsOXI24khw"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:10
msgid "Slides: https://slides.com/paulcraven/if-statements"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rstNone
msgid ".. image:: chapters/10_if_statements/question_mark_1.svg"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:16
msgid ""
"So far we've learned to create expressions, use variables, and make our own "
"functions."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:18
msgid ""
"Our next step is to learn how to write code that will only run based on a "
"certain condition. For example, we may want to draw \"Game Over\" text on "
"the screen--but only if the player has run out of lives."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:22
msgid ""
"To do this we need to learn how to use an ``if`` statement. The ``if`` "
"statement is also known as a *conditional statement*. (You can use the term "
"\"conditional statement\" when you want to impress everyone how smart you "
"are.) The ``if`` statement allows a computer to make a decision. Is it hot "
"outside? Has the spaceship reached the edge of the screen? Has too much "
"money been withdrawn from the account? A program can decide which block of "
"code to run based on this statement."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:31
msgid "Basic Comparisons"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rstNone
msgid ".. image:: chapters/10_if_statements/scale.svg"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:37
msgid ""
"Here are two example ``if`` statements. As you can probably guess, the "
"statements see which variable is smaller, and which is larger."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:41
msgid "Example ``if`` statements: less than, greater than"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:41
msgid ""
"# Variables used in the example ``if`` statements\n"
"a = 4\n"
"b = 5\n"
"\n"
"# Basic comparisons\n"
"if a < b:\n"
"    print(\"a is less than b\")\n"
"\n"
"if a > b:\n"
"    print(\"a is greater than b\")\n"
"\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:58
msgid "Try running the code. You should get output that looks like this:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:60
msgid "Output"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:60
msgid ""
"a is less than b\n"
"Done"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:66
msgid ""
"Since ``a`` is less than ``b``, the first statement will print out if this "
"code is run. Flip the values, and the second statement will run. If **both**"
" variables ``a`` and ``b`` were equal to 4, then *neither* of the two "
"statements would print because 4 is not greater than 4."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:71
msgid ""
"Play around with the program by adjusting the values to verify the code "
"continues to do what we expect."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:74
msgid "Flowcharts"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:76
msgid ""
"To show the flow of a program a *flowchart* may be used. Most people can "
"follow a flowchart even without an introduction to programming. See how the "
"flowchart below matches with the code we just ran. ``if`` statements go in "
"diamonds and have two possible paths out of them. Regular statements go in "
"rectangles, and have only one exit path."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:85
msgid ".. image:: chapters/10_if_statements/flowchart_example.svg"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:85
msgid "Flowchart"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:87
msgid ""
"This book skips an in-depth look at flow-charting, but if you are curious "
"and want to learn more, Wikipedia has a great article introducing how it "
"works:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:90
msgid "http://en.wikipedia.org/wiki/Flowchart"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:93
msgid "More Comparison Types"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:95
msgid ""
"The prior example checked to see if variables were \"greater than\" or "
"\"less than.\" Numbers that were *equal* would *not* pass the test. To check"
" if values are greater than *or equal*, we use the two characters ``>=`` "
"right next to each other, with no space between. Let's adjust our prior code"
" sample:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:100
msgid "Example ``if`` statements: less than or equal, greater than or equal"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:100
msgid ""
"if a <= b:\n"
"    print(\"a is less than or equal to b\")\n"
"\n"
"if a >= b:\n"
"    print(\"a is greater than or equal to b\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:110
msgid ""
"The ``<=`` and ``>=`` symbols must be used in order, and there may not be a "
"space between them. For example, ``=<`` will not work, nor will ``< =``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:113
msgid ""
"When writing these statements out on actual paper, some new programmers like"
" to use the ``≤`` symbol, because that's what we learned in math. For "
"example:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:116
msgid "if a ≤ b:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:120
msgid ""
"This ``≤`` symbol doesn't actually work in a program. Plus most people don't"
" know how to type it on the keyboard. (Just in case you are curious, to type"
" it hold down the 'alt' key while typing 243 on the number pad.) So when "
"writing out code, particularly on paper, remember to use the two characters "
"``<=`` and not the one character ``≤`` symbol. If you encounter a written "
"test or quiz, make sure to write it out correctly and not lose points."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:127
msgid ""
"The next set of code checks to see if two items are equal or not. If we want"
" to check for equality, we use two equals signs in a row: ``==``. The "
"operator for not equal is ``!=``. Here they are in action. Add them to the "
"bottom of the other code we were working on, and try them out."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:132
msgid "Example ``if`` statements: \"equal\" and \"not equal\""
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:132
msgid ""
"# Equal\n"
"if a == b:\n"
"    print(\"a is equal to b\")\n"
"\n"
"# Not equal\n"
"if a != b:\n"
"    print(\"a and b are not equal\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:144
msgid "Learn when to use = and ==."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:146
msgid ""
"It is very easy to mix up when to use ``==`` and ``=``. Use ``==`` if you "
"are *asking* if they are equal, use ``=`` if you are *assigning* a value."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:149
msgid ""
"The two most common mistakes in mixing the ``=`` and ``==`` operators are "
"demonstrated below:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:152
msgid ""
"# This is wrong\n"
"a == 1\n"
"\n"
"# This is also wrong\n"
"if a = 1:\n"
"    print(\"A is one\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:162
msgid ""
"Stop! Please take a moment to go back and carefully study the last two code "
"examples. Save time later by making sure you understand when to use ``=`` "
"and ``==``. Don't guess."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:167
msgid "Indentation"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:169
msgid ""
"Indentation matters. Each line under the ``if`` statement that is indented "
"will only be executed ``if`` the statement is ``True``. In this example, the"
" three lines indented under the ``if`` statement will run *only* if true, "
"the fourth print statement will *always* run because it is *not* indented "
"under an ``if`` statement."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:174
msgid ""
"if a == 1:\n"
"    print(\"If a is one, this will print.\")\n"
"    print(\"So will this.\")\n"
"    print(\"And this.\")\n"
"\n"
"print(\"This will always print because it is not indented.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:184
msgid ""
"The indentation amount must be the same. This wandering code doesn't work."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:186
msgid ""
"if a == 1:\n"
"  print(\"Indented two spaces.\")\n"
"    print(\"Indented four. This will generate an error.\")\n"
"   print(\"The computer will want you to make up your mind.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:194
msgid ""
"Once an ``if`` statement has been finished, it is not possible to re-indent "
"to go back to it. The test has to be performed again. So this code example "
"doesn't work at all:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:198
msgid ""
"if a == 1:\n"
"    print(\"If a is one, this will print.\")\n"
"    print(\"So will this.\")\n"
"\n"
"print(\"This will always print because it is not indented.\")\n"
"    print(\"This will generate an error. Why it is indented?\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:208
msgid "If you try running it, you'll get the following ``IndentationError``:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:210
msgid ""
"  File \"c:/my_code/test.py\", line 8\n"
"    print(\"This will generate an error. Why it is indented?\")\n"
"    ^\n"
"IndentationError: unexpected indent"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:218
msgid "Using And/Or"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:220
msgid ""
"An ``if`` statement can check multiple conditions by chaining together "
"comparisons with ``and`` and ``or``. These are also considered to be "
"**operators** just like the ``+`` and ``-`` characters are. Go ahead and "
"create a third variable ``c`` and try using these two new operators "
"yourself."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:226
msgid "Example ``if`` statements, using \"and\" and \"or\""
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:226
msgid ""
"# And\n"
"if a < b and a < c:\n"
"    print(\"a is less than b and c\")\n"
"\n"
"# Non-exclusive or\n"
"if a < b or a < c:\n"
"    print(\"a is less than either b or c (or both)\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:238
msgid "Repeat yourself please."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:240
msgid ""
"A common mistake is to omit a variable when checking it against multiple "
"conditions. You cannot write ``if a < b or c``. Neither will ``if a < b or <"
" c`` work. The computer does not know what to check against the variable "
"``c``. It will not assume to check it against ``a``. You need the full ``if "
"a < b or a < c`` for it to work correctly."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:246
msgid ""
"# This is not correct\n"
"if a < b or < c:\n"
"    print(\"a is less than b and c\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:254
msgid "Boolean Variables"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:256
msgid ""
"Python supports Boolean variables. What are Boolean variables? Boolean "
"variables can store a value of either ``True`` or ``False``. `Boolean "
"algebra`_ was developed by `George Boole`_ back in 1854, well before "
"electronic computers. Yet his work forms the basis of how computer logic "
"works. If only he knew how important his work would become!"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:265
msgid ""
"An ``if`` statement needs an expression to evaluate to ``True`` or "
"``False``. What may seem odd is that it does not actually need to do any "
"comparisons if a variable already evaluates to ``True`` or ``False``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:269
msgid ""
"For example, in this code we set the variable ``a`` to ``True``. Our ``if`` "
"statement does't need a comparison. If ``a`` is True it will execute the "
"statement, if it is ``False`` it will not."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:273
msgid "If statements and Boolean data types"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:273
msgid ""
"# Boolean data type. This is legal!\n"
"a = True\n"
"if a:\n"
"    print(\"a is true\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:282
msgid ""
"Another operator we can use is the ``not`` operator. You can take any "
"statement or boolean and flip between True/False. The statement ``if a`` "
"runs if ``a`` is ``True``, the statement ``if not a`` runs if the statement "
"is ``False``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:286
msgid "The not operator example 2"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:286
msgid ""
"# How to use the not function\n"
"if not a:\n"
"    print(\"a is false\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:294
msgid ""
"It is also possible to use Boolean variables with the ``and`` and ``or`` "
"operators."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:296
msgid "Using \"and\" with Boolean variables"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:296
msgid ""
"a = True\n"
"b = False\n"
"\n"
"if a and b:\n"
"    print(\"a and b are both true\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:306
msgid "Who knew True/False could be hard?"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:308
msgid ""
"It is also possible to assign a variable to the result of a comparison. In "
"the code below, the variables ``a`` and ``b`` are compared. If they are "
"equal, ``c`` will be ``True``, otherwise ``c`` will be ``False``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:312
msgid "Assigning values to Boolean data types"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:312
msgid ""
"a = 3\n"
"b = 3\n"
"\n"
"# This next line is strange-looking, but legal.\n"
"# c will be true or false, depending if\n"
"# a and b are equal.\n"
"c = a == b\n"
"\n"
"# Prints value of c, in this case True\n"
"print(c)"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:327
msgid "Zero means False. Everything else is True."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:329
msgid ""
"It is possible to create an ``if`` statement with a condition that does not "
"evaluate to ``True`` or ``False``. Because this is confusing, we don't use "
"this fact a lot, but it is important to understand how the computer handles "
"these values when searching for problems. These two examples will run, and "
"will cause the text to be printed out because the values in the ``if`` "
"statement are non-zero:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:336
msgid ""
"if 1:\n"
"    print(\"1\")\n"
"if \"A\":\n"
"    print(\"A\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rstNone
msgid "What values are False?"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:346
msgid ""
"There are a few other values besides zero that are treated as ``False``. "
"Namely the ``None`` keyword, an empty string ``\"\"``, and an empty list. "
"We'll cover lists and the ``None`` keyword in later chapters."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:350
msgid ""
"The code below will not print out anything because the value in the ``if`` "
"statement is zero. The value zero is treated as ``False``. Any value other "
"than zero (like 2, -1, 600, or even \"Fred\") is considered ``True``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:354
msgid ""
"if 0:\n"
"    print(\"Zero\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:363
msgid "The ``input`` Function"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:365
msgid ""
"Rather than hard-coding values into our program, we can use the ``input`` "
"function to ask the user to type something in. The ``input`` function is "
"reasonably simple to use:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:369
msgid ""
"temperature = input(\"What is the temperature in Fahrenheit? \")\n"
"print(\"You said the temperature was \" + temperature + \".\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rstNone
msgid ".. image:: chapters/10_if_statements/keyboard.svg"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:379
msgid ""
"As a parameter to ``input``, just give it text to use as a prompt. Whatever "
"the user types in, is stored in the variable on the left."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:382
msgid ""
"Note that there is a question mark and a space at the end of that string. If"
" you didn't have this, what the user types in will run right up next to the "
"prompt. That looks terrible. The user is tempted to type a space as the "
"first part of their input, which complicates things for us later."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:387
msgid ""
"There's one more thing we have to learn. We can't take what the user types "
"in and compare it to a number. This program:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:390
msgid ""
"temperature = input(\"What is the temperature in Fahrenheit? \")\n"
"if temperature > 90:\n"
"    print(\"It is hot outside.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:397
msgid "...will fail with a ``TypeError``:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:399
msgid "TypeError: '>' not supported between instances of 'str' and 'int'"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:403
msgid ""
"Whatever the user types in is stored as text. We also call text a \"string\""
" because to the computer it is just a string of characters. This is "
"different than a number, and the computer does not know how to compare them."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:407
msgid ""
"Therefore, we need to convert the input into a number. We can do with with "
"the ``int`` for integers. If we have floating point numbers, use the "
"``float`` function."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:411
msgid ""
"In this example we get the input, convert it to an integer, and then we can "
"use it in an ``if`` statement."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:414
msgid ""
"# Get input from the user\n"
"temperature = input(\"What is the temperature in Fahrenheit? \")\n"
"\n"
"# Convert the input to an integer\n"
"temperature = int(temperature)\n"
"\n"
"# Do our comparison\n"
"if temperature > 90:\n"
"    print(\"It is hot outside.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:427
msgid ""
"You can chain the ``input`` and ``int`` functions on one line if you like, "
"as shown here:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:429
msgid ""
"# Get input from the user\n"
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"\n"
"# Do our comparison\n"
"if temperature > 90:\n"
"    print(\"It is hot outside.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:441
msgid "Else and Else If"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:443
msgid ""
"So far, we've used simple ``if`` statements to run a block of code, or not "
"run it. What if we want to select between two blocks of code? What if we "
"want to run one of *four* different blocks? To do this, we need \"else\" and"
" \"else if\" logic."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:448
msgid ""
"Let's start with a simple ``if`` statement that prints if it is hot outside:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:450
msgid ""
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:458
msgid ""
"If the programmer wants code to be executed if it is *not* hot, she can use "
"the ``else`` statement. As for indentation, notice how the ``else`` is lined"
" up with the ``i`` in the ``if`` statement. Also notice how ``else`` is "
"followed by a colon just like the ``if`` statement. Try running this code. "
"The ``if`` statement will always run one of the two blocks, but never both."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:465
msgid "Example if/else statement"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:465
msgid ""
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"else:\n"
"    print(\"It is not hot outside\")\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:476
msgid ""
"In the case of an if...else statement, one block of code will always be "
"executed. The first block will be executed ``if`` the statement evaluates to"
" ``True``, the second block if it evaluates to ``False``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:480
msgid ""
"It is possible to chain several ``if`` statements together using the "
"else...if statement. Python abbreviates this as ``elif``. In this example we"
" add a third possible combination using ``elif``."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:484
msgid "Example if/elif/else statement"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:484
msgid ""
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"elif temperature < 30:\n"
"    print(\"It is cold outside\")\n"
"else:\n"
"    print(\"It is not hot outside\")\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:497
msgid ""
"In this next example, we've made a mistake. The program will output \"It is "
"hot outside\" even if the user types in 120 degrees. Why? How can the code "
"be fixed?"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:501
#: ../../source/chapters/10_if_statements/if_statements.rst:520
msgid "Example of improper ordering if/elif/else"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:501
msgid ""
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"elif temperature > 110:\n"
"    print(\"Oh man, you could fry eggs on the pavement!\")\n"
"elif temperature < 30:\n"
"    print(\"It is cold outside\")\n"
"else:\n"
"    print(\"It is ok outside\")\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:516
msgid ""
"The computer doesn't do a \"best-fit\", it looks at the ``if`` statement in "
"order. As 120 is greater than 90, it will run the first condition and skip "
"the rest. To fix this code, we need to reorder it."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:520
msgid ""
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 110:\n"
"    print(\"Oh man, you could fry eggs on the pavement!\")\n"
"elif temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"elif temperature < 30:\n"
"    print(\"It is cold outside\")\n"
"else:\n"
"    print(\"It is ok outside\")\n"
"print(\"Done\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:538
msgid "Text Comparisons"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:540
msgid ""
"It is possible to use an ``if`` statement to check text, as shown in this "
"example."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:542
msgid "Case sensitive text comparison"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:542
msgid ""
"user_name = input(\"What is your name? \")\n"
"if user_name == \"Paul\":\n"
"    print(\"You have a nice name.\")\n"
"else:\n"
"    print(\"Your name is ok.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:552
msgid ""
"The prior example will only match if the user enters \"Paul\" with a capital"
" P. It will not work if the user enters lower-case \"paul\" or upper-case "
"\"PAUL\"."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:555
msgid ""
"A common mistake is to forget the quotes around the string being compared. "
"In the example below, the computer will think that Paul is a variable that "
"stores a value. It will flag an error because it has no idea what is stored "
"in the variable Paul."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:560
msgid "Incorrect comparison"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:560
msgid ""
"user_name = input(\"What is your name? \")\n"
"if user_name == Paul: # This does not work because quotes are missing\n"
"    print(\"You have a nice name.\")\n"
"else:\n"
"    print(\"Your name is ok.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:573
msgid "Multiple Text Possibilities"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:575
msgid ""
"When comparing a variable to multiple possible strings of text, it is "
"important to remember that the comparison *must* include the variable. For "
"example:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:578
msgid ""
"# This does not work! It will always be true\n"
"if user_name == \"Paul\" or \"Mary\":"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:583
msgid "Instead, the code should read like this:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:585
msgid ""
"# This does work\n"
"if user_name == \"Paul\" or user_name == \"Mary\":"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:590
msgid ""
"Confusingly, the first example will run, but it will *always* trigger the "
"``if`` statement even if the name isn't Paul or Mary. This is because for "
"any value other than zero, the computer assumes to mean ``True``. \"Mary\" "
"isn't zero. So to the computer \"Mary\" is the same thing as ``True`` and so"
" it will run the code in the ``if`` statement."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:598
msgid "Case-Insensitive Comparisons"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:600
msgid ""
"If the program needs to match text, and we don't care if it is upper or "
"lower case, we need a case-insensitive comparison. The easiest way to do "
"that is to convert everything to lower-case, then compare. This can be done "
"with the ``lower()`` command."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:605
msgid "Learn to be insensitive."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:607
msgid ""
"The example below will take whatever the user enters, convert it to lower-"
"case, and then do the comparison. Important: Don't convert to lower-case and"
" compare it against a string that has uppercase! Then you'll never match."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:612
msgid "Case-insensitive text comparison"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:612
msgid ""
"user_name = input(\"What is your name? \")\n"
"if user_name.lower() == \"paul\":\n"
"    print(\"You have a nice name.\")\n"
"else:\n"
"    print(\"Your name is ok.\")"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:623
msgid "Review"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:625
msgid ""
"With the introduction of ``if`` statements we've learned how to run code "
"only if a condition is true. By adding in ``elif`` and ``else`` statements "
"we can run one of multiple possible code blocks depending upon a condition."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:629
msgid ""
"We've learned that we write conditions using **comparison operators** like "
"``<`` and ``>``. We've learned that ``==`` is the comparison operator for "
"asking if two items are equal, while ``=`` is the assignment operator used "
"to set a variable's value. We can reverse logic using the ``not`` operator."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:635
msgid ""
"Finally, we were introduced to **Boolean** values, where variables can store"
" ``True`` or ``False``. The ``if`` statements can operate based on those "
"values."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:639
msgid "Example if Statements"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:641
msgid ""
"The next set of example code below runs through all the concepts talked "
"about earlier."
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:644
msgid ""
"# Sample Python/Pygame Programs\n"
"# Simpson College Computer Science\n"
"# http://programarcadegames.com/\n"
"# http://simpson.edu/computer-science/\n"
"\n"
"# Explanation video: http://youtu.be/pDpNSck2aXQ\n"
"\n"
"# Variables used in the example if statements\n"
"a = 4\n"
"b = 5\n"
"c = 6\n"
"\n"
"# Basic comparisons\n"
"if a < b:\n"
"    print(\"a is less than b\")\n"
"\n"
"if a > b:\n"
"    print(\"a is greater than than b\")\n"
"\n"
"if a <= b:\n"
"    print(\"a is less than or equal to b\")\n"
"\n"
"if a >= b:\n"
"    print(\"a is greater than or equal to b\")\n"
"\n"
"# NOTE: It is very easy to mix when to use == and =.\n"
"# Use == if you are asking if they are equal, use =\n"
"# if you are assigning a value.\n"
"if a == b:\n"
"    print(\"a is equal to b\")\n"
"\n"
"# Not equal\n"
"if a != b:\n"
"    print(\"a and b are not equal\")\n"
"\n"
"# And\n"
"if a < b and a < c:\n"
"    print(\"a is less than b and c\")\n"
"\n"
"# Non-exclusive or\n"
"if a < b or a < c:\n"
"    print(\"a is less than either a or b (or both)\")\n"
"\n"
"\n"
"# Boolean data type. This is legal!\n"
"a = True\n"
"if a:\n"
"    print(\"a is true\")\n"
"\n"
"if not a:\n"
"    print(\"a is false\")\n"
"\n"
"a = True\n"
"b = False\n"
"\n"
"if a and b:\n"
"    print(\"a and b are both true\")\n"
"\n"
"a = 3\n"
"b = 3\n"
"c = a == b\n"
"print(c)\n"
"\n"
"# These are also legal and will trigger as being true because\n"
"# the values are not zero:\n"
"if 1:\n"
"    print(\"1\")\n"
"if \"A\":\n"
"    print(\"A\")\n"
"\n"
"# This will not trigger as true because it is zero.\n"
"if 0:\n"
"    print(\"Zero\")\n"
"\n"
"# Comparing variables to multiple values.\n"
"# The first if statement appears to work, but it will always\n"
"# trigger as true even if the variable a is not equal to b.\n"
"# This is because \"b\" by itself is considered true.\n"
"a = \"c\"\n"
"if a == \"B\" or \"b\":\n"
"    print(\"a is equal to b. Maybe.\")\n"
"\n"
"# This is the proper way to do the if statement.\n"
"if a == \"B\" or a == \"b\":\n"
"    print(\"a is equal to b.\")\n"
"\n"
"# Example 1: If statement\n"
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"print(\"Done\")\n"
"\n"
"# Example 2: Else statement\n"
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"else:\n"
"    print(\"It is not hot outside\")\n"
"print(\"Done\")\n"
"\n"
"# Example 3: Else if statement\n"
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"elif temperature < 30:\n"
"    print(\"It is cold outside\")\n"
"else:\n"
"    print(\"It is not hot outside\")\n"
"print(\"Done\")\n"
"\n"
"# Example 4: Ordering of statements\n"
"# Something with this is wrong. What?\n"
"temperature = int(input(\"What is the temperature in Fahrenheit? \"))\n"
"if temperature > 90:\n"
"    print(\"It is hot outside\")\n"
"elif temperature > 110:\n"
"    print(\"Oh man, you could fry eggs on the pavement!\")\n"
"elif temperature < 30:\n"
"    print(\"It is cold outside\")\n"
"else:\n"
"    print(\"It is ok outside\")\n"
"print(\"Done\")\n"
"\n"
"# Comparisons using string/text\n"
"# The input statement will ask the user for input and put it in user_name.\n"
"user_name = input(\"What is your name? \")\n"
"if user_name == \"Paul\":\n"
"    print(\"You have a nice name.\")\n"
"else:\n"
"    print(\"Your name is ok.\")\n"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:649
msgid "Online Coding Problems"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:651
msgid ""
"Practice on-line by completing the first set of coding problems available "
"here:"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:653
msgid "https://repl.it/community/classrooms/174286"
msgstr ""

#: ../../source/chapters/10_if_statements/if_statements.rst:655
msgid ""
"All problems beginning with ``03`` can be done with the knowledge from this "
"chapter."
msgstr ""
