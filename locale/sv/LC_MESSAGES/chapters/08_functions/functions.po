# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-13 15:19-0500\n"
"PO-Revision-Date: 2020-04-03 18:43+0000\n"
"Language-Team: Swedish (https://www.transifex.com/arcade-academy/teams/108729/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/chapters/08_functions/functions.rst:4
msgid "Creating Functions"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ""
".. image:: images/video.svg\n"
"   :alt: Video link"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:11
msgid "Video: https://youtu.be/966lu1_Ht1o"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:12
msgid "Slides: https://slides.com/paulcraven/deck-adf6d9"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/teacher.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:18
msgid ""
"In the last chapter we learned how to create variables and use them in "
"expressions. In this chapter we are going to build on that knowledge to "
"create **functions**. Functions are groups of commands we give to the "
"computer. We've already *used* functions, for example the ``print`` function"
" and the ``draw_line`` function. Now we are going to learn to *make our own*"
" functions."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:25
msgid "Functions help us by:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:27
msgid ""
"**Making our code easier to read.** By writing our own functions we can have"
" functions to ``draw_tree`` and ``draw_horse`` which is a lot easier to read"
" than long blocks of code that just draw lines and rectangles."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:30
msgid ""
"**Abstracting our code.** By using variables, we can abstract our code and "
"tell a function *where* to draw a tree, *how big* to draw it, and *what "
"color* to draw it. This is a lot more flexible than one set of code that can"
" only draw a tree in one exact place and one exact size."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:34
msgid ""
"**Re-using our code.** By calling a function, I can re-use code over and "
"over. If it takes ten lines of code to draw a horse, I can put that in a "
"function. Then if I want to draw three horses, I don't need thirty lines of "
"code to do it."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:38
msgid ""
"**Dividing a complex problem into simpler ones.** The key to programming, "
"and a lot of things in life, is to learn how to take a large, overwhelmingly"
" complex problem, and divide it into small problems. For example, we have "
"functions that can display dots on the screen. Then there functions that can"
" draw a line using those dots. Then functions that can draw triangles using "
"those lines. Then functions that can draw trees using those triangles. Then "
"finally a forest function that uses the trees function. Drawing a complex "
"forest is broken down into simple functions that build off each other."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:48
msgid ""
"**Making code easier to maintain.** If there is a problem in your program, "
"it is easier to find when your program is divided into parts. If your car "
"isn't moving correctly, and there is a ``move_car`` function, that's easy to"
" find. Plus, if all cars move using that function, I can fix a problem for "
"every car in my game in one spot."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:55
msgid "Creating Simple Functions"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:57
msgid "Defining a function in Python is easy. Here's an example:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:59
msgid "Defining a function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:59
msgid ""
"def print_hello():\n"
"    \"\"\" This is a comment that describes the function. \"\"\"\n"
"    print(\"Hello!\")"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:67
msgid "To write a function:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:69
msgid "Start with the keyword ``def``, which is short for \"define.\""
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:70
msgid ""
"Next, give the function a name. Function names follow the same rules that "
"variable names follow. They must:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:73
msgid "Start with a lower case letter. (Or in special cases, an underscore.)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:74
msgid "After the first letter, only use letters, numbers, and underscores."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:75
msgid "Spaces are not allowed. Use underscores instead."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:76
msgid ""
"While upper-case letters can be used, function names are normally all lower-"
"case."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:79
msgid ""
"After that, we have a set of parenthesis. Inside the parenthesis will go "
"**parameters**. We'll explain those in a bit."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:81
msgid "Next, a colon."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:82
msgid ""
"All the code that goes in the function will be on the following lines. That "
"code must be indented four spaces. The first line that is not indented, "
"signifies the function is done."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:85
msgid ""
"Usually we start a function with a multi-line comment that explains what the"
" function does."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:90
msgid ""
"Function definitions go *below* the ``import`` statements, and *above* the "
"rest of the program. While you can put them somewhere else, you shouldn't."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:93
msgid ""
"Defining a function doesn't cause the computer to *do* anything. It is like "
"giving a recipe to the computer. Give someone a recipe for banana bread and "
"they know how to make it. They haven't actually made it yet, they just know "
"how. You have to *tell* them to make banana bread. That is, after we "
"**define** the function we must **call** the function before the code in it "
"runs."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:101
msgid ""
"To call a function, type the function name and follow it by parenthesis. Do "
"not use ``def``, that is only used when we define what the function does, "
"not when we tell the computer to run it."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:105
msgid "Below is a program that defines ``print_hello``, then calls it twice."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:108
msgid "Defining and calling a function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:108
msgid ""
"def print_hello():\n"
"    \"\"\" This is a comment that describes the function. \"\"\"\n"
"    print(\"Hello!\")\n"
"\n"
"# This calls our function twice.\n"
"print_hello()\n"
"print_hello()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:121
msgid ""
"You can define and use multiple functions. But all function definitions "
"should go before the main code. In this example, see how we've defined two "
"functions and then we call them in our main code."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:125
msgid "Defining and calling multiple functions."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:125
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"# Here is the main code, after all the function\n"
"# definitions.\n"
"print_hello()\n"
"print_goodbye()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:144
msgid "Creating a Main Function"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:146
msgid ""
"Actually, almost *all* code should go in a function. It is a good practice "
"to put the main starting point of your program in a function called ``main``"
" and call it."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:150
msgid ""
"In this next example, we do just that. See how we took the two function "
"calls and put them in a ``main`` function. Also, note that we call ``main`` "
"at the end. Without that, our program won't do anything at all."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:154
msgid "Using a ``main`` function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:154
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    \"\"\" This is my main program function \"\"\"\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Call (run) the main function\n"
"main()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:176
msgid ""
"Remember how our drawing code always starts with ``import arcade``? That "
"just imports a lot of functions that are defined in the Arcade library so we"
" can use those functions ourselves. It doesn't run anything, just imports "
"functions."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:181
msgid ""
"Eventually we'll learn to write our own modules we import. Right now, we "
"couldn't do that with our code because attempting to import the code would "
"actually *run* it. What we want is simply to make the functions available "
"for us to use."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:186
msgid ""
"With that in mind, a better habit to get into is to check if we are trying "
"to ``import`` the file before calling the ``main`` function. The statement, "
"in this next example, looks a little weird. In fact, it is weird enough I "
"just look it up and copy/paste it any time I want to use it. Don't worry "
"about understanding *how* it works yet, just realize it is a good practice "
"and why."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:193
msgid ""
"Check to make sure we aren't importing the file before calling ``main``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:193
msgid ""
"def print_hello():\n"
"    print(\"Hello!\")\n"
"\n"
"\n"
"def print_goodbye():\n"
"    print(\"Bye!\")\n"
"\n"
"\n"
"def main():\n"
"    print_hello()\n"
"    print_goodbye()\n"
"\n"
"\n"
"# Only run the main function if we are running this file. Don't run it\n"
"# if we are importing this file.\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:216
msgid ""
"If this is too confusing, just call the ``main()`` method instead. "
"Eventually we'll learn about imports and ``if`` statements. Then it will "
"make more sense."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:220
msgid "Take in Data with Parameters"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/data.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:226
msgid ""
"Functions are even more powerful if we can feed data into them to process."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:228
msgid ""
"Here is a simple example that will take in a number and print it. Notice how"
" I've created a new variable ``my_number`` in between the parenthesis. This "
"is called a function **parameter**. It is just a variable that is given a "
"value equal to what is passed in when called. In the example below, it is "
"given first a ``55``, then ``25``, and finally an ``8``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:235
msgid ""
"def print_number(my_number):\n"
"    print(my_number)\n"
"\n"
"\n"
"print_number(55)\n"
"print_number(25)\n"
"print_number(8)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:246
msgid ""
"You can pass in multiple numbers, just separate them with a comma. In this "
"case ``a`` will be 11 and ``b`` will be 7."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:249
msgid ""
"def add_numbers(a, b):\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:258
msgid ""
"Occasionally, new programmers want to set the parameter values inside the "
"function. This is wrong. If you do this, the function would only work for "
"those values. The power is in specifying the numbers *outside* the function."
" We don't want the function to be limited to only certain data values."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:263
msgid ""
"This example works, but it is wrong. Because if we ever changed line 8 to "
"pass in different values, the program would ignore those values because on "
"lines 3 and 4 they are always over written with 11 and 7."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:267
msgid ""
"# This is wrong\n"
"def add_numbers(a, b):\n"
"    a = 11\n"
"    b = 7\n"
"    print(a + b)\n"
"\n"
"\n"
"add_numbers(11, 7)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:280
msgid "Returning and Capturing Values"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:282
msgid ""
"Functions can not only take *in* values, functions can *return* values."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:287
msgid "Returning values"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:289
msgid ""
"For example, here is a function that returns two numbers added together. See"
" how it uses a ``return`` statement on line four to return the result out of"
" the function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:293
msgid ""
"# Add two numbers and return the results\n"
"def sum_two_numbers(a, b):\n"
"    result = a + b\n"
"    return result"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:302
msgid ""
"Return is not a function, and does not use parentheses. Don't do "
"``return(result)``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:305
msgid ""
"This only gets us half-way there. Because if we call the function now, not "
"much happens. Take a look at this example:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:308
msgid ""
"# This doesn't do much, because we don't capture the result\n"
"sum_two_numbers(22, 15)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:313
msgid ""
"The numbers get added. They get returned to us. But we do nothing with the "
"result. So if you run this program, nothing prints to the screen and we "
"can't tell that anything happened."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:320
msgid "Capturing Returned Values"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/catch.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:326
msgid ""
"We need to *capture* the result. We do that by setting a variable equal to "
"the value the function returned. In this next code example we capture the "
"result by putting a variable to the left of the function call and using the "
"``=`` (assignment) operator. Later the code prints the value, but that's not"
" capturing! That is just *using* the result we captured and printing it."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:332
msgid ""
"# Capture the function's result into a variable\n"
"# by putting \"my_result =\" in front of it.\n"
"# (Use whatever variable name best describes the data,\n"
"# don't blindly use 'my_result' for everything.)\n"
"my_result = sum_two_numbers(22, 15) # <--- This line CAPTURES the return value\n"
"\n"
"# Now that I captured the result, print it.\n"
"print(my_result) # <--- This is printing, NOT capturing."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:343
msgid ""
"Now the result isn't lost. It is stored in the ``my_result`` variable which "
"we can print or use some other way."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:346
msgid ""
"We will do this *a lot*, so pause for a second and set it sit in your mind. "
"I'll wait."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:349
msgid ""
"Great, now imagine you have an instructor or co-worker watching over your "
"shoulder. You have a function. It returns a value. The person over your "
"shoulder says, \"Ok, now you just have to capture the value.\" The pressure "
"is on."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:353
msgid ""
"Don't panic! Remember to *capture* the value returned from a function, put a"
" variable to the left of it and use an ``=`` operator."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:358
msgid "Volume Cylinder Example"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/cans.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:364
msgid ""
"Let's use what we learned for something more practical. Here is a function "
"that returns the volume of a cylinder. Notice how we take in two parameters "
"and return the result of the calculation."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:369
msgid ""
"def volume_cylinder(radius, height):\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:377
msgid ""
"Because of the ``return``, this function could be used later on as part of "
"an equation to calculate the volume of a six-pack like this:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:380
msgid "six_pack_volume = volume_cylinder(2.5, 5) * 6"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:384
msgid ""
"See how the value returned from ``volume_cylinder`` goes into the equation "
"and is multiplied by six. We would not be able to chain together "
"calculations like that if all we could do was ``print``, instead of "
"``return``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:388
msgid ""
"There is a big difference between a function that *prints* a value and a "
"function that *returns* a value. Look at the code below. Pause for a bit and"
" make sure you can follow how it works. Read the comments. This is a common "
"source of confusion for new programmers, so spend a bit of time studying it."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:394
msgid ""
"# This function will print the result\n"
"def sum_print(a, b):\n"
"    result = a + b\n"
"    print(result)\n"
"\n"
"\n"
"# This function will return the result\n"
"def sum_return(a, b):\n"
"    result = a + b\n"
"    return result\n"
"\n"
"\n"
"# This code prints the sum of 4+4, because the function has a print\n"
"sum_print(4, 4)\n"
"\n"
"# This code prints nothing, because the function returns, and doesn't print\n"
"sum_return(4, 4)\n"
"\n"
"# This code will not set x1 to the sum.\n"
"# The sum_print function does not have a return statement, so it returns\n"
"# nothing!\n"
"# x1 actually gets a value of 'None' because nothing was returned\n"
"x1 = sum_print(4, 4)\n"
"print(\"x1 =\", x1)\n"
"\n"
"# This will set x2 to the sum and print it properly.\n"
"x2 = sum_return(4, 4)\n"
"print(\"x2 =\", x2)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:426
msgid ""
"This next code example has a very common issue new programmers face. It is "
"not unusual to get stuck looking at code like this example below. Your task:"
" how would you print the result of the function? See if you can figure it "
"out without looking ahead."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:432
msgid ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"# Wait, how do I print the result of this?\n"
"calculate_average(x, y)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:447
msgid ""
"What's the answer? How do we print the result of ``calculate_average``? In "
"the code above, the program can't print the result because the ``result`` "
"variable only exists inside the function. Instead, use a new variable "
"outside the function, and the ``=`` operator to capture the result:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:455
msgid ""
"def calculate_average(a, b):\n"
"    \"\"\" Calculate an average of two numbers \"\"\"\n"
"    result = (a + b) / 2\n"
"    return result\n"
"\n"
"\n"
"# Pretend you have some code here\n"
"x = 45\n"
"y = 56\n"
"\n"
"average = calculate_average(x, y)\n"
"print(average)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:471
msgid "Documenting Functions"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/document.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:477
msgid ""
"Functions in Python typically have a comment as the first statement of the "
"function. This comment is delimited using three double quotes, and is called"
" a **docstring**. In this case, the docstring is on line 2:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:481
msgid ""
"def volume_cylinder(radius, height):\n"
"    \"\"\"Returns volume of a cylinder given radius, height.\"\"\"\n"
"    pi = 3.141592653589\n"
"    volume = pi * radius ** 2 * height\n"
"    return volume"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:491
msgid ""
"The great thing about using docstrings in functions is that the comment can "
"be pulled out and put into a website. That can be part of a larger website "
"that documents your code. For example, `here is the documentation for "
"drawing a circle "
"<https://arcade.academy/arcade.html#arcade.draw_circle_outline>`_, generated"
" automatically from the function comment. In fact, everything on that page "
"is automatically generated. Most languages have similar tools that can help "
"make documenting a breeze. This can save a lot of time as you start working "
"on larger programs."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:503
msgid "Variable Scope"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/telescope.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:509
msgid ""
"The use of functions introduces the concept of **scope**. Scope is where in "
"the code a variable is \"alive\" and can be accessed. For example, look at "
"the code below:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:513
msgid ""
"# Define a simple function that sets\n"
"# x equal to 22\n"
"def f():\n"
"    x = 22\n"
"\n"
"\n"
"# Call the function\n"
"f()\n"
"# This fails, x only exists in f()\n"
"print(x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:526
msgid ""
"The last line will generate an error because ``x`` only exists inside of the"
" ``f()`` function. Every heard the phrase \"What happens in Vegas, stays in "
"Vegas?\" Well, variables created in a function stay in the function. The "
"variable is created when ``f()`` is called and the memory it uses is freed "
"as soon as ``f()`` finishes."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:532
msgid ""
"Here's where it gets complicated. A more confusing rule is how to access "
"variables created *outside* of the ``f()`` function. In the following code, "
"``x`` is created before the ``f()`` function, and thus can be read from "
"inside the ``f()`` function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:537
msgid ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:551
msgid ""
"Variables created ahead of a function may be read inside of the function "
"only if the function does not *change* the value. This code, very similar to"
" the code above, will fail. The computer will claim it doesn't know what "
"``x`` is."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:555
msgid ""
"# Create the x variable and set to 44\n"
"x = 44\n"
"\n"
"\n"
"# Define a simple function that prints x\n"
"def f():\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Call the function\n"
"f()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:571
msgid "Pass-by-Copy"
msgstr ""

#: ../../source/chapters/08_functions/functions.rstNone
msgid ".. image:: chapters/08_functions/copy.svg"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:577
msgid ""
"When you call a function and set a value to a function parameter, that value"
" is a *copy* of the original. For example take a look at this code:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:581
msgid ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set y\n"
"y = 10\n"
"# Call the function\n"
"f(y)\n"
"# Print y to see if it changed\n"
"print(y)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:596
msgid ""
"The value of ``y`` does not change, even though the ``f()`` function "
"increases the value passed to it. Each of the variables listed as a "
"parameter in a function is a brand new variable. The value of that variable "
"is copied from where it is called."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:601
msgid ""
"This is reasonably straight forward in the prior example. Where it gets "
"confusing is if both the code that calls the function and the function "
"itself have variables named the same. The code below is identical to the "
"prior listing, but rather than use ``y`` it uses ``x``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:606
msgid ""
"# Define a simple function that prints x\n"
"def f(x):\n"
"    x += 1\n"
"    print(x)\n"
"\n"
"\n"
"# Set x\n"
"x = 10\n"
"# Call the function\n"
"f(x)\n"
"# Print x to see if it changed\n"
"print(x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:621
msgid ""
"The output is the same as the program that uses y. Even though both the "
"function and the surrounding code use x for a variable name, there are "
"actually two different variables. There is the variable x that exists inside"
" of the function, and a different variable x that exists outside the "
"function."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:628
msgid "Functions Calling Functions"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:630
msgid ""
"For each of the examples below, think about what would print. Check to see "
"if you are right. If you didn't guess correctly, spend to the time to "
"understand why."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:635
msgid "Example 1"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:637
msgid ""
"In this example, note that if you don't use a function, it doesn't run."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:639
msgid ""
"# Example 1\n"
"def a():\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:657
msgid "Example 2"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:659
msgid ""
"# Example 2\n"
"def a():\n"
"    b()\n"
"    print(\"A\")\n"
"\n"
"\n"
"def b():\n"
"    c()\n"
"    print(\"B\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:680
msgid "Example 3"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:682
msgid ""
"# Example 3\n"
"def a():\n"
"    print(\"A\")\n"
"    b()\n"
"\n"
"\n"
"def b():\n"
"    print(\"B\")\n"
"    c()\n"
"\n"
"\n"
"def c():\n"
"    print(\"C\")\n"
"\n"
"\n"
"a()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:702
msgid "Example 4"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:704
msgid ""
"# Example 4\n"
"def a():\n"
"    print(\"A start\")\n"
"    b()\n"
"    print(\"A end\")\n"
"\n"
"\n"
"def b():\n"
"    print(\"B start\")\n"
"    c()\n"
"    print(\"B end\")\n"
"\n"
"\n"
"def c():\n"
"    print(\"C start and end\")\n"
"\n"
"\n"
"a()"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:727
msgid "Example 5"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:729
msgid ""
"# Example 5\n"
"def a(x):\n"
"    print(\"A start, x =\", x)\n"
"    b(x + 1)\n"
"    print(\"A end, x =\", x)\n"
"\n"
"\n"
"def b(x):\n"
"    print(\"B start, x =\", x)\n"
"    c(x + 1)\n"
"    print(\"B end, x =\", x)\n"
"\n"
"\n"
"def c(x):\n"
"    print(\"C start and end, x =\", x)\n"
"\n"
"\n"
"a(5)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:751
msgid "Example 6"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:753
msgid ""
"While line 3 of this example increases ``x``, the ``x`` variable in the "
"function is a different variable than the ``x`` that is in the rest of the "
"program. So that ``x`` never changes."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:756
msgid ""
"# Example 6\n"
"def a(x):\n"
"    x = x + 1\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:769
msgid "Example 7"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:771
msgid ""
"This example is similar to the prior example, but we ``return x`` at the "
"end. Turns out, it doesn't matter. Because we never do anything with the "
"return value. So the global variable ``x`` still doesn't increase. See the "
"next example."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:774
msgid ""
"# Example 7\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"a(x)\n"
"\n"
"print(x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:788
msgid "Example 8"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:790
msgid ""
"This example take the value returned from ``a`` and stores it back into "
"``x``. How? By doing ``x = a(x)`` instead of just ``a(x)``."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:793
msgid ""
"# Example 8\n"
"def a(x):\n"
"    x = x + 1\n"
"    return x\n"
"\n"
"\n"
"x = 3\n"
"x = a(x)\n"
"\n"
"print(x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:807
msgid "Example 9"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:809
msgid ""
"# Example 9\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    print(x, y)\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"a(y, x)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:823
msgid "Example 10"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:825
msgid ""
"While you can have two ``return`` statements in a function, once you hit the"
" first ``return`` the function ends. In this case, ``return y`` never runs, "
"because we already returned from the function in the prior line."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:828
msgid ""
"# Example 10\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x\n"
"    return y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:845
msgid "Example 11"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:847
msgid ""
"This is not something you can do in every programming language. You can "
"return two values by using a comma and listing them."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:849
msgid ""
"# Example 11\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"z = a(x, y)\n"
"\n"
"print(z)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:865
msgid "Example 12"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:867
msgid ""
"If you return two values out of a function, you can capture them this way."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:869
msgid ""
"# Example 12\n"
"def a(x, y):\n"
"    x = x + 1\n"
"    y = y + 1\n"
"    return x, y\n"
"\n"
"\n"
"x = 10\n"
"y = 20\n"
"x2, y2 = a(x, y) # Most computer languages don't support this\n"
"\n"
"print(x2)\n"
"print(y2)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:886
msgid "Example 13"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:888
msgid ""
"# Example 13\n"
"def a(my_data):\n"
"    print(\"function a, my_data =  \", my_data)\n"
"    my_data = 20\n"
"    print(\"function a, my_data =  \", my_data)\n"
"\n"
"\n"
"my_data = 10\n"
"\n"
"print(\"global scope, my_data =\", my_data)\n"
"a(my_data)\n"
"print(\"global scope, my_data =\", my_data)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:904
msgid "Example 14"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:906
msgid ""
"We will talk more about these next two examples when we talk about \"lists\""
" and \"classes\" later. These examples don't operate like you might expect "
"at first. Take a look and see what is different. We'll explain why it works "
"differently later."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:910
msgid ""
"# Example 14\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list = [10, 20, 30]\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:926
msgid "Example 15"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:928
msgid ""
"# Example 15\n"
"# New concept!\n"
"# Covered in more detail in a later chapter\n"
"def a(my_list):\n"
"    print(\"function a, list =  \", my_list)\n"
"    my_list[0] = 1000\n"
"    print(\"function a, list =  \", my_list)\n"
"\n"
"\n"
"my_list = [5, 2, 4]\n"
"\n"
"print(\"global scope, list =\", my_list)\n"
"a(my_list)\n"
"print(\"global scope, list =\", my_list)"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:947
msgid "Review"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:949
msgid ""
"This chapter was all about **functions**. We learned how to define functions"
" using the ``def`` keyword. We can call functions just by using the function"
" name followed by parenthesis. Functions can take in data by using "
"**parameters**. Functions return data using the ``return`` statement. We can"
" capture that data by setting a variable equal to the function call. "
"Functions can be documented with comments. Variables created inside a "
"function cannot be accessed outside the function. Parameter variables "
"contain *copies* of the original data and can be modified without changing "
"the original. Functions can call other functions, which can call yet more "
"functions."
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:962
msgid "Online Coding Problems"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:964
msgid ""
"Practice on-line by completing the first set of coding problems available "
"here:"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:966
msgid "https://repl.it/community/classrooms/174286"
msgstr ""

#: ../../source/chapters/08_functions/functions.rst:968
msgid ""
"All problems beginning with ``02`` can be done with the knowledge from this "
"chapter."
msgstr ""
